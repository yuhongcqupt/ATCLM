<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2013-2015 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/.xsd">
  <message>
    <entry key="InvalidTimeEpoch">The supported range for ''{0}'' is between ''{1}'' and ''{2}, but the specified epoch is ''{3}'', which is invalid.</entry>
    <entry key="InvalidTimeRange">The supported range for time system ''{0}'' is between ''{1}'' and ''{2}, but the specified range is ''{3}'' and ''{4}'', which is invalid.</entry>
    <entry key="InvalidRange">The minimum value must be smaller than the maximum value for the time range.</entry>
    <entry key="OutOfRangeTimeConversion"> Can not convert the date ''{0}'' from time system ''{1}'' to ''{2}'' because the valid range of the destination time system is ''{3}'' and ''{4}''.</entry>
    <entry key="TimeDataOverflow">The total bits for time data are {0,number,integer}, and the second part has {1,number,integer} bits. However, this storage cannot hold the results from the date time calculation.</entry>
    <entry key="OutOfRangeTimeValue">The time is out of range. The valid range for ''{0}'' time range is between ''{1}'' and ''{2}''.</entry>
    <entry key="OutOfRangeTimeStruct">The time ''{0}'' is out of range. The valid range for ''{1}'' time range is between ''{2}'' and ''{3}''.</entry>
    <entry key="OutOfSupportedTimeRange">Out of valid time range. The supported ''{0}'' time range is between ''{1}'' and ''{2}''.</entry>
    <entry key="InvalidTimeValue">The time value should be a double vector with six elements, i.e., [year, month, day, hour, minute, second]. Year, month, day, hour, minute should be integer numbers. Second can be decimal number.</entry>
    <entry key="InvalidTimeDataProp">The time data property can be double, single or integer. When it is integer, the total bits can be 8, 16, 32, 64 or 128. The bits to represent seconds must be in range of 0 - 64. And the bits to represent sub-second must be in range of 0 and 64, and no more than the total bits.</entry>
    <entry key="InvalidTimeZoneValue">The time zone value should be a double vector with two elements. The first is the hour, which should be in range of [-12, 13]. And the second is the minute, which should be -45, -30, 0, 30, 45.</entry>
    <entry key="InvalidIntervalTime">Begin time ''{0}'' should not be later than end time ''{1}''.</entry>
    <entry key="SL_DSCPT_ABS_TIME_CLOCK">Output absolute time clock.</entry>
    <entry key="SL_DSCPT_ABS_TIME_CONVERTER">Convert date time between different time systems.</entry>
    <entry key="SL_DSCPT_ABS_TIME_INSPECTOR">Inspect absolute time element.</entry>
    <entry key="SL_DSCPT_ABS_TIME_COMPARATOR">Compare two absolute time points.</entry>
    <entry key="SL_DSCPT_ABS_TIME_CONSTANT">Output a date time constant.</entry>
    <entry key="SL_DSCPT_ABS_TIME_ADDER">Add or subtract elapse seconds to output a past or future date and time.</entry>
    <entry key="SL_DSCPT_ABS_TIME_SUBTRACTOR">Subtract two date time numbers and output the difference in seconds.</entry>
    <entry key="SL_DSCPT_ABS_TIME_EPOCH_CONVERTER">Convert absolute time to epoch time.</entry>
    <entry key="SL_DSCPT_ABS_TIME_SCHEDULER">Schedule date time based events.</entry>
    <entry key="SL_DSCPT_ABS_TIME_CLOCK_READER">Output date time based on the date time clock.</entry>
    <entry key="TAI_CB">International atomic time (TAI)</entry>
    <entry key="UTC_CB">Coordinated universal time (UTC)</entry>
    <entry key="UNIX_CB">Unix time</entry>
    <entry key="GPS_CB">Global positioning system time (GPS)</entry>
    <entry key="JD_CB">Julian day</entry>
    <entry key="MJD_CB">Modified julian day</entry>
    <entry key="LOCAL_CB">Local time</entry>
    <entry key="YEAR_CB">Year</entry>
    <entry key="MONTH_CB">Month</entry>
    <entry key="DAY_CB">Day</entry>
    <entry key="HOUR_CB">Hour</entry>
    <entry key="MINUTE_CB">Minute</entry>
    <entry key="SECOND_CB">Second</entry>
    <entry key="NANOSECOND_CB">Nanosecond</entry>
    <entry key="ATTOSECOND_CB">Attosecond</entry>
    <entry key="EPOCHTIME_CB">Epoch time</entry>
    <entry key="IS_EARLIER_THAN_CB">Is earlier than</entry>
    <entry key="IS_SAME_AS_CB">Is same as</entry>
    <entry key="IS_LATER_THAN_CB">Is later than</entry>
    <entry key="AbsTimeOperation">Operation:</entry>
    <entry key="ABSTIME_ADDITION_CB">Addition</entry>
    <entry key="ABSTIME_SUBTRACTION_CB">Subtraction</entry>
    <entry key="TimeZone">Time zone:</entry>
    <entry key="TimeStandard">Time scale:</entry>
    <entry key="InputTimeFormat">Input time format:</entry>
    <entry key="OutputTimeFormat">Output time format:</entry>
    <entry key="TimeFormatDateTime">Date time</entry>
    <entry key="TimeFormatEpochTime">Epoch time</entry>
    <entry key="TimeFormatDateTimeStruct">Date time structure</entry>
    <entry key="ClockBlkAbsoluteStartTime">Absolute start time point: </entry>
    <entry key="ClockBlkTimeError">Error:</entry>
    <entry key="ClockBlkJitter">Jitter:</entry>
    <entry key="ClockBlkDrift">Drift:</entry>
    <entry key="ReferenceTime">Epoch:</entry>
    <entry key="TimeStampStorageType">Time stamp store type: </entry>
    <entry key="TimeStampStorageDouble">Double</entry>
    <entry key="TimeStampStorageSingle">Single</entry>
    <entry key="TimeStampStorageSigned">Signed integer</entry>
    <entry key="TimeStampStorageUnsigned">Unsigned integer</entry>
    <entry key="TimeStampTotalBits">Time stamp total bits: </entry>
    <entry key="TimeStampFracBits">Time stamp fractional second bits: </entry>
    <entry key="TimeStampStorageBit8">8</entry>
    <entry key="TimeStampStorageBit16">16</entry>
    <entry key="TimeStampStorageBit32">32</entry>
    <entry key="TimeStampStorageBit64">64</entry>
    <entry key="TimeStampStorageBit128">128</entry>
    <entry key="StorageFracBit0">0</entry>
    <entry key="StorageFracBit1">1</entry>
    <entry key="StorageFracBit2">2</entry>
    <entry key="StorageFracBit3">3</entry>
    <entry key="StorageFracBit4">4</entry>
    <entry key="StorageFracBit5">5</entry>
    <entry key="StorageFracBit64">64</entry>
    <entry key="SchedulerBlkStartTime">Start time:</entry>
    <entry key="SchedulerBlkEndTime">End time:</entry>
    <entry key="ReferenceBlkSimStartTime">Simulation start time:</entry>
    <entry key="AbsTimeConverterBlkInputTime">Time</entry>
    <entry key="AbsTimeConverterBlkInputEpoch">Epoch</entry>
    <entry key="AbsTimeConverterBlkInputDate">Date</entry>
    <entry key="AbsTimeClockBlkOutputFormat">Output format:</entry>
    <entry key="AbsTimeClockBlkOutputTime">Time</entry>
    <entry key="AbsTimeClockBlkOutputEpoch">Epoch</entry>
    <entry key="AbsTimeClockBlkOutputDate">Date</entry>
    <entry key="AbsTimeConstantBlkTimePoint">Absolute time point:</entry>
    <entry key="AbsTimeInspectorOutputYear">Output year</entry>
    <entry key="AbsTimeInspectorOutputMonth">Output month</entry>
    <entry key="AbsTimeInspectorOutputDay">Output day</entry>
    <entry key="AbsTimeInspectorOutputHour">Output hour</entry>
    <entry key="AbsTimeInspectorOutputMinute">Output minute</entry>
    <entry key="AbsTimeInspectorOutputSecond">Output second</entry>
    <entry key="AbsTimeInspectorOutputNanoSecond">Output nanosecond</entry>
    <entry key="AbsTimeInspectorOutputAttoSecond">Output attosecond</entry>
    <entry key="AbsTimeInspectorOutputEpochTime">Output epoch time</entry>
    <entry key="AbsTimeComparatorComparison">Comparison:</entry>
    <entry key="AbsTimeConverterInputPortAbsTime">In block  ''{0}'', the input port {1, number,integer} must be time data type when the input format is time. </entry>
    <entry key="InputPortOnlyAcceptAbsTime">In block  ''{0}'', the input port {1, number,integer} must be time data type. </entry>
    <entry key="InputPortOnlyAcceptDurationTime">In block  ''{0}'', the input port {1, number,integer} must be duration data type. </entry>
    <entry key="OutputPortOnlyAcceptAbsTime">In block  ''{0}'', the output port must be time data type. </entry>
    <entry key="JuliandDateOnlySupportTAI">In block  ''{0}'', only TAI time can convert to Julian Date or Modified Juliand Date. </entry>
    <entry key="BlockOutOfSupportedTimeRange">In block ''{0}'', time is out of supported range</entry>
    <entry key="SimulationStartTimeIsNotAbsoluteTime">The simulation start time is not calendar date time. But block ''{0}'' requires an abolute start time.</entry>
    <entry key="AbsClockTimeValueIncorrectFormat">In block ''{0}'', the time value is not correct.</entry>
    <entry key="AbsClockTimeZoneIncorrectFormat">In block ''{0}'', the time zone format is not correct.</entry>
    <entry key="DisplayStoredIntegerIsNotSupported">In block ''{0}'', display stored integer is not supported.</entry>
  </message>
</rsccat>

<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2009-2016 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../matlab/resources/schema/msgcat.xsd">
  <message>
    <entry key="AliasTypeEmissionRequiresECoderLicense">An ERT or ERT derived target is required to preserve the names of alias data types in the generated code.  Reverting to builtin types during code generation.</entry>
    <entry key="AliasTypesNotSupportedForMultiWordCodeGen">Alias data type ''{0}'' has multiword base type ''{1}''.  Code generation does not support multiword aliases; reverting to base type.</entry>
    <entry key="AliasType_BaseType_Auto">Invalid BaseType specified; BaseType may not be set to ''auto''</entry>
    <entry key="AliasType_ErrResolvingDataType">Error resolving BaseType ''{0}''</entry>
    <entry key="AliasType_Invalid_BaseType">Invalid BaseType specified; BaseType must be a valid identifier</entry>
    <entry key="AliasType_Invalid_ResolvedDataType">BaseType ''{0}'' did not resolve to a valid data type</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Bus">BaseType ''{0}'' did not resolve to a valid data type.  Cannot specify BaseType to be a bus object</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Enum">BaseType ''{0}'' did not resolve to a valid enumerated data type</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_EnumMetaClassObj">BaseType ''{0}'' is invalid because it resolves to a meta.class object that represents an enumerated data type.  To create an alias to this enumerated data type set the BaseType to ''Enum: {1}''</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Unscaled">BaseType ''{0}'' is invalid because it does not contain scaling information</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_DataScope">The DataScope for BaseType ''{0}'' is set to ''Exported'' but that type is dependent on ''{1}'' which has its DataScope set to ''Auto''. Either set the DataScope of ''{2}'' to ''Auto'' or set the DataScope of ''{3}'' to ''Exported''</entry>
    <entry key="BlockDataTypeError">Datatype error reported from block ''{0}''</entry>
    <entry key="UnknownBusType">Bus type ''{0}'' is not registered with the block diagram ''{1}''.</entry>
    <entry key="Bus_Invalid_Elements">Invalid Elements specified for bus object ''{0}''; the Elements must be an empty array, or array of objects of the class Simulink.BusElement</entry>
    <entry key="Bus_Invalid_Elements2">Invalid Elements specified; the Elements must be an empty array, or array of objects of the class Simulink.BusElement</entry>
    <entry key="BusElementCannotBeComplex">Element ''{0}'' of data type ''{1}'' may not be complex since it is of the bus type ''{2}''; set its ''Complexity'' to ''real''</entry>
    <entry key="BusElementCannotBeNonScalar">Element ''{0}'' of data type ''{1}'' must be scalar since it is of the bus type ''{2}''; set its ''Dimensions'' to 1. Alternately, consider setting the ''Mux blocks used to create bus signals'' diagnostic in the Connectivity pane of the Configuration Parameters dialog to ''error'' to support arrays of buses.</entry>
    <entry key="BusElementCannotHaveSameNameAsType">Both the name and the data type of element ''{0}'' in the bus type ''{1}'' are same. Consider specifying a different name for the element or its data type.</entry>
    <entry key="BusElementMustInheritSampleTime">Element ''{0}'' of data type ''{1}'' must inherit its sample time since it is of the bus type ''{2}''; set its ''SampleTime'' to -1</entry>
    <entry key="BusElementMustUseNonFramedSamplingMode">Element ''{0}'' of data type ''{1}'' may not specify a framed sampling mode since it is of the bus type ''{2}''; set its ''SamplingMode'' to ''Sample based''</entry>
    <entry key="BusElementMustUseNonFramedSamplingMode_Not2D">Element ''{0}'' of data type ''{1}'' may not specify a framed sampling mode since it is not 2-Dimensional; set its ''SamplingMode'' to ''Sample based''</entry>
    <entry key="BusObjectNotInScope">Simulink.Bus object ''{0}'' is not in scope from ''{1}''</entry>
    <entry key="BusParameterMustBeZeroOrStruct">Invalid value specified for the parameter {0} of block ''{1}''. The incoming signal is a non-virtual bus with datatype ''{2}'' and the acceptable values for the parameter are zero or a finite numeric MATLAB structure. Specify zero or use Simulink.Bus.createMATLABStruct to create a MATLAB structure from the bus signal</entry>
    <entry key="BusParameterMustBeStruct">The parameter {0} of block ''{1}'' must be a valid structure..</entry>
    <entry key="BusSameNameAsExistingType">Cannot register bus data type ''{0}'' because another type with this name already exists</entry>
    <entry key="CanAcceptOnlyDblAndBool">The input and output port data types of {0} must be either ''double'' or ''boolean''.  However, the input (or output) port of ''{1}'' is driven by (or driving) signal of data type ''{2}''</entry>
    <entry key="CannotDispMergedSignal">The selected signal originating from output port {0,number,integer} on ''{1}'' cannot be displayed because it is being merged</entry>
    <entry key="CannotInitSomeDStates">Not all discrete states in model ''{0}'' could be initialized.  This generally happens when a model contains non-double or complex discrete states.  Use ''Structure with time'' or ''Structure'' format to initialize states</entry>
    <entry key="ConstantNonBuiltinOutportDtype">The sample time of output port {0,number,integer} of block ''{1}'' is constant, yet its data type is ''{2}''; the sample time of an output port may be constant only if its data type is stored in a builtin type.  If the block has an input port, consider placing a Zero Order Hold block at the input port, to force a non-constant sample time.  Alternatively, if this block is an S-Function, consider using the option SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME</entry>
    <entry key="DataTypeIsNotAnEnumType">''{0}'' attempts to access an enumerated value from data type ''{1}'' but this is not an enumerated data type</entry>
    <entry key="DataTypeObjectNotInScope">Simulink.DataType object ''{0}'' is not in scope from ''{1}''</entry>
    <entry key="DataTypePropertiesNotSet">''{0}'' cannot get the properties of data type ''{1}'' since they have not been set</entry>
    <entry key="DataTypeSizeHasNotBeenSet">Size of data type ''{0}'' has not been set</entry>
    <entry key="DataType_InvalidHeaderFile">The data type must specify a HeaderFile property that has no delimiters (''\'' will be implied), or matching delimiters</entry>
    <entry key="DataType_WithIntrinsicFixptName">Invalid name ''{0}'' for data type object; the names of data type objects may not start with "sfix", "ufix", or "flt" since these prefixes are reserved for intrinsic fixed point types</entry>
    <entry key="DefaultDataTypeMethodInRightClickBuild">The data types for blocks inside the subsystem ''{0}'' are under-specified. Simulink is using a heuristic to select the data types for these blocks. This could lead to inconsistency between the behavior of the code generated for that subsystem using ''Build Subsystem'', and the behavior in the full model. Consider setting the ''Underspecified data types'' parameter specified in the ''Data Validity'' Group of the ''Diagnostics'' tab of the Configuration Parameters dialog to ''warning'' or ''error'' in order to see a list of relevant blocks</entry>
    <entry key="DefaultDataTypeMethodUsedAtPort">The data types for some signals in this model are under-specified.  Simulink is using a heuristic to select these data types.  The heuristic leads to reasonable choices in most cases.  Usage of the heuristic can be avoided by setting signal data types using Signal Specification blocks or signal objects. The list of signals with under-specified data types are:</entry>
    <entry key="DefaultDataTypeMethodUsedAtOutPortBlk">Signal with under-specified data types: output port {0,number,integer} of ''{1}''.</entry>
    <entry key="DefaultDataTypeMethodUsedAtInPortBlk">Signal with under-specified data types: input port {0,number,integer} of ''{1}''.</entry>
    <entry key="DworkNamesMustBeUnique">Data type work vector names must be unique.  Data type work {0,number,integer} and {1,number,integer} of ''{2}'' have the same name ''{3}''</entry>
    <entry key="EnablePortsMustHaveIsPositiveRegistered">The enable signal of ''{0}'' may not be of data type ''{1}'' because that type has no positive function registered</entry>
    <entry key="TrigPortsDataTypeNeedRepresentZero">The trigger signal of ''{0}'' may not be of data type ''{1}'' because that type can't represent zero</entry>
    <entry key="EnablePortsDataTypeNeedRepresentZero">The enable signal of ''{0}'' may not be of data type ''{1}'' because that type can't represent zero</entry>
    <entry key="EnumTypeInvalidClass">Cannot register enumerated data type ''{0}''.</entry>
    <entry key="EnumTypeInvalidClassWithBlock">''{0}'' cannot register enumerated data type ''{1}''.</entry>
    <entry key="EnumTypeInvalidIndex">''{0}'' attempts to access enumerated value with index {1,number,integer} from enumerated data type ''{2}''. This data type has {3,number,integer} enumerated values so the index must be in the range 0:{4,number,integer}</entry>
    <entry key="EnumTypeInvalidValue">''{0}'' attempts to access enumerated value with underlying value {1,number,integer} from enumerated data type ''{2}'' but this data type does not have an enumerated value with this underlying value</entry>
    <entry key="EnumTypeOverflowDuringConversion">Overflow occurred in ''{0}'' during the conversion from data type ''{1}'' to enumerated data type ''{2}''</entry>
    <entry key="EnumTypePrecisionLossDuringConversion">Loss of precision occurred in ''{0}'' during the conversion from data type ''{1}'' to enumerated data type ''{2}''</entry>
    <entry key="EnumTypeValuesDoNotFitIntoProdTargetInt">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the integer type on the production target hardware ({2,number,integer} bits).</entry>
    <entry key="EnumTypeValuesDoNotFitIntoTargetInt">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the integer type on the current target hardware ({2,number,integer} bits).</entry>
    <entry key="EnumTypeNotAClass">Cannot register enumerated data type because value specified is not a class.</entry>
    <entry key="EnumTypeNotAClassWithName">Cannot register enumerated data type ''{0}'' because there is no class with this name.</entry>
    <entry key="EnumTypeNotAnEnumerationClass">Cannot register enumerated data type ''{0}'' because it is not a valid enumeration class.</entry>
    <entry key="EnumTypeWithInvalidSuperclass">Cannot register enumerated data type ''{0}'' because it has an invalid superclass.</entry>
    <entry key="EnumTypeWithMultipleInheritance">Cannot register enumerated data type ''{0}'' because it has multiple superclasses.</entry>
    <entry key="EnumTypeInsidePackage">Cannot register enumerated data type ''{0}'' because it is inside a package</entry>
    <entry key="EnumTypeWithComplexValues">Cannot register enumerated data type ''{0}'' with complex values</entry>
    <entry key="EnumTypeWithNoEnumStrings">Cannot register enumerated data type ''{0}'' with no enumerated values</entry>
    <entry key="EnumType_ReturnArgumentMustBeAString" note="stringDatatypeUpdate">Static method {0} must return a character vector</entry>
    <entry key="EnumType_ReturnArgumentMustBeBoolean">Static method {0} must return a scalar logical number (true/false)</entry>
    <entry key="GetEnumTypeInfoArg1">Input argument 1 must be the name of a valid enumerated data type</entry>
    <entry key="GetEnumTypeInfoArg2">Input argument 2 must be a valid property name ({0})</entry>
    <entry key="EnumType_SameNameAsExistingType">Cannot register enumerated data type ''{0}'' because another type with this name already exists</entry>
    <entry key="EnumType_SameNameAsExistingTypeWithBlock">Cannot register enumerated data type ''{0}'' for ''{1}'' because another type with this name already exists</entry>
    <entry key="EnumType_SameNameAsWorkspaceVar">Cannot register enumerated data type ''{0}'' because there is a global variable with the same name as this type</entry>
    <entry key="EnumType_SameNameAsWorkspaceVarWithBlock">Cannot register enumerated data type ''{0}'' for ''{1}'' because there is a global variable with the same name as this type</entry>
    <entry key="EnumType_CannotSpecifyStorageType">Specifying storage type is not supported for enumerated data types</entry>
    <entry key="EnumType_ValuesDoNotFitIntoStorageType">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the storage type ''{2}''.</entry>
    <entry key="DynamicEnum_CannotConvertFromOtherClass">Cannot convert objects of class ''{0}'' to enumeration class ''{1}''</entry>
    <entry key="DynamicEnum_InvalidNumericValue">The input array could not be converted to the ''{0}'' enumeration class because not all elements match the underlying values of the enumerated list</entry>
    <entry key="DynamicEnum_DuplicateAttributeDefinition">Cannot specify ''{0}'' more than once</entry>
    <entry key="DynamicEnum_EmptyDescription">Cannot specify empty description</entry>
    <entry key="DynamicEnum_EmptyHeaderFile">Cannot specify empty header file</entry>
    <entry key="DynamicEnum_InvalidDefaultValue">Default value does not match any of the enumeration names</entry>
    <entry key="DynamicEnum_InvalidStorageType">Storage type is not the name of a built-in integer type in Simulink</entry>
    <entry key="DynamicEnum_NotEnoughInputs">Not enough input arguments.  At least 3 inputs must be provided</entry>
    <entry key="DynamicEnum_MismatchInPVPairs">Invalid number of input arguments</entry>
    <entry key="DynamicEnum_InvalidClassName">Invalid name for enumeration class ''{0}''</entry>
    <entry key="DynamicEnum_EmptyEnumStrings">No enumeration names specified</entry>
    <entry key="DynamicEnum_MismatchInNumberOfValues">Number of underlying numeric values ({0,number,integer}) does not match the number of enumeration names ({1,number,integer})</entry>
    <entry key="DynamicEnum_EnumValuesNotInteger">Underlying numeric values must be real integers</entry>
    <entry key="DynamicEnum_EnumValuesOutOfRange">Underlying numeric values do not fit into the specified StorageType</entry>
    <entry key="DynamicEnum_EnumValuesComplexOrSparse">Underlying numeric values cannot be complex or sparse</entry>
    <entry key="DynamicEnum_SecondArgMustBeCellOfStrings" note="stringDatatypeUpdate">Second argument must be a cell array of character vectors, where each character vector is a valid enumeration name</entry>
    <entry key="DynamicEnum_InvalidEnumString">Cannot define enumeration with name ''{0}'' because this is not a valid MATLAB identifier</entry>
    <entry key="DynamicEnum_DuplicateEnumString">Cannot define enumeration with the same name ''{0}'' more than once</entry>
    <entry key="DynamicEnum_AttributeNameMustBeString" note="stringDatatypeUpdate">Input argument {0,number,integer} must be a character vector</entry>
    <entry key="DynamicEnum_AttributeValueMustBeString" note="stringDatatypeUpdate">Value of ''{0}'' must be specified as a character vector</entry>
    <entry key="DynamicEnum_AttributeValueMustBeLogical">Value of ''{0}'' must be specified as a logical scalar</entry>
    <entry key="DynamicEnum_InvalidAttributeName">Invalid attribute for enumeration class ''{0}''</entry>
    <entry key="DynamicEnum_CannotClearClass">Cannot clear existing class ''{0}''</entry>
    <entry key="DynamicEnum_CannotModifyStorageType">Cannot modify storage type of existing class ''{0}''</entry>
    <entry key="DynamicEnum_TypeNotAnEnumerationClass">Cannot modify ''{0}'' because it is not a valid enumeration class.</entry>
    <entry key="ErrOverFlowDetected">Overflow condition has been detected at time {0} in ''{1}''</entry>
    <entry key="ErrSaturationOccurred">Saturation has occurred at time {0} in ''{1}''</entry>
    <entry key="ErrorDownCastOfInterfacedVar">Parameter {0} of ''{1}'' is being cast from data type ''{2}'' to the data type ''{3}''. Downcasts and signed/unsigned mismatches of tunable parameter expressions are not allowed in order to ensure consistent behavior between simulation and generated code</entry>
    <entry key="FixedPointLicenseFailDt">''{0}'' requested use of data type ''{1}''. Use of this data type requires the Fixed-Point Designer license, but license checkout failed.  To use this model without a fixed-point license, select "Fixed-Point Tool" from the model''s Analysis menu.  Select the root model in Model Hierarchy. Set "Fixed-point instrumentation mode" to be "Force off", "Data type override" to be "Double" and "Data type override applies to" to be "All numeric types". This replaces most uses of fixed-point data types with floating-point doubles.  In rare cases, a few attempts to use restricted data types may still exist.  Reconfiguring to use floating-point types and/or inserting Typecasts is necessary in these cases.</entry>
    <entry key="FixedPointLicenseFailLog">''{0}'' requested logging of min, max or overflow. Logging requires the Fixed-Point Designer license, but license checkout failed. To use this model without a fixed-point license, select "Fixed-Point Tool" from the model''s Analysis menu. Select the root model in Model Hierarchy and set "Fixed-point instrumentation mode" to be "Force off".  This turns fixed-point instrumentation off.</entry>
    <entry key="ImportedTypeWithNoHeader">''{0}'' has DataScope set to ''Imported'' and no header file specified. A header file must be specified for ''Imported'' data types.</entry>
    <entry key="InitComplexFlagOfBoolDTypeError">Boolean signals cannot be complex</entry>
    <entry key="InitComplexFlagOfOpaqueDTypeError">Opaque signals cannot be complex</entry>
    <entry key="InitComplexFlagOfStructDTypeError">Struct signals cannot be complex</entry>
    <entry key="InitComplexSignalError">An error occurred while initializing a signal''s numeric type (real or complex)</entry>
    <entry key="InitDataTypeError">An error occurred while initializing a signal''s data type</entry>
    <entry key="InputMustBeBoolOrDbl">Cannot set the input port data type of ''{0}'' to ''{1}''.  The input port data type must be either ''double'' or ''boolean''.  Signals of other data types can be converted to ''double'' or ''boolean'' by using a Data Type Conversion</entry>
    <entry key="InputMustBeIntegerForConvertToEnumType">''{0}'' cannot convert signal from data type ''{1}'' to enumerated data type ''{2}''. The data type of the input signal must be an integer type</entry>
    <entry key="InputPortCannotAcceptMixedDataType">Input port cannot accept mixed data types. Input port {0,number,integer} of ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types.</entry>
    <entry key="InputPortCannotAcceptMixedDataTypeVirtualBus">Input port cannot accept a virtual bus of mixed data types. Input port {0,number,integer} of ''{1}'' expects a signal with unique data type. However, it is driven by a virtual bus with elements of differing data types.  One solution is to convert the virtual bus to a nonvirtual bus by placing a Signal Conversion block prior to the input port, with its ''Output'' parameter set to ''Nonvirtual bus''.  Alternatively, if this is an input port of a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="InputPortCannotAcceptMixedDataTypeWithHint">The inport block ''{0}'' is directly connected to outport ''{1}'' and therefore cannot accept a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of the inport block ''{0}''. Alternatively, if this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="InputPortCannotAcceptMixedDataTypeWithHint_Feedback">Input port cannot accept mixed data types. Input port {0,number,integer} of ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types. If this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option. Otherwise, insert a Signal Conversion block with the ''Signal copy'' option selected, at the output of block ''{2}''. </entry>
    <entry key="InputPortCannotAcceptMixedSignal">Input port cannot accept mixed numeric types. Input port {0,number,integer} of ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements</entry>
    <entry key="InputPortCannotAcceptMixedSignalWithHint">Input port cannot accept mixed numeric types. Input port {0,number,integer} of ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of block ''{2}''.  Alternatively, if this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="InputPortComplexSignalMismatch">Complex signal mismatch. Input port {0,number,integer} of ''{1}'' expects a signal of {2}. However, it is driven by a signal of {3}</entry>
    <entry key="InputPortDataTypeMismatch">Data type mismatch. Input port {0,number,integer} of ''{1}'' expects a signal of {2}. However, it is driven by a signal of {3}.</entry>
    <entry key="InvBoolPortDType">{0} does not accept ''boolean'' signals. The input signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double''</entry>
    <entry key="InvBuiltinPortDType">{0} does not accept signals of data type ''{1}''. ''{2}'' only accepts the ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'' data types</entry>
    <entry key="InvConvertBetweenForParameter">The parameter {0} of ''{1}'' is not being successfully converted from type ''{2}'' to ''{3}''{4}{5}</entry>
    <entry key="InvConvertBetweenForPortDType">The input signal(s) of ''{0}'' are not being successfully converted from type ''{1}'' to ''{2}''{3}{4}</entry>
    <entry key="InvConvertBetweenForTriggerPortDType">The trigger signal of ''{0}'' is not being successfully converted from data type ''{1}'' to ''{2}''</entry>
    <entry key="InvDWorkBooleanComplexDwork">Boolean dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a ''boolean'' dwork. It cannot be complex</entry>
    <entry key="InvDWorkEnumTypeComplexDwork">Enumerated dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with enumerated data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDWorkOpaqueComplexDwork">Opaque dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDWorkStructComplexDwork">Struct dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDisagreeInternalRuleDType">Data type mismatch. The internal rule determines the output of {0} to be a signal of data type ''{1}''. However, it is driving a signal of data type ''{2}''.</entry>
    <entry key="InvFixptAndBuiltinPortDType">{0} does not accept signals of data type ''{1}''. ''{2}'' only accepts ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', and fixed-point data types</entry>
    <entry key="InvFixptBoolOutPortDType">{0} does not accept ''boolean'' signals at output port. The output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvFixptBoolOutputPortDType">Output port(s) of {0} does not accept ''boolean'' signals. The output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double'', or one of the fixed-point data types</entry>
    <entry key="InvFixptBoolPortDType">{0} does not accept ''boolean'' signals. The input and output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvInputBooleanComplexSignal">Boolean signals cannot be complex. Input port {0,number,integer} of ''{1}'' is a ''boolean'' signal. It cannot be complex</entry>
    <entry key="InvInputEnumTypeComplexSignal">Enumerated signals cannot be complex. Input port {0,number,integer} of ''{1}'' is a signal with enumerated data type ''{2}''. It cannot be complex</entry>
    <entry key="InvInputFixptComplexSignal">Input port {0,number,integer} of ''{1}'' is a fixed-point signal of data type ''{2}'' with non-zero bias or slope that is not a power of 2. The signal cannot be complex</entry>
    <entry key="InvInputOpaqueComplexSignal">Opaque signals cannot be complex. Input port {0,number,integer} of ''{1}'' is a signal with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvInputPortComplexSignalSetting">Input port complex signal mismatch.  Input port {0,number,integer} of ''{1}'' expects a {2} signal. Based on the output port complex signal, the input port must be a {3} signal</entry>
    <entry key="InvInputPortDType">The input port data type of {0} must be one of the MATLAB data types. However, the input port of ''{1}'' is driven by a signal of data type ''{2}''</entry>
    <entry key="InvInputPortDTypeNotSupported">The input port of {0} does not support the data type ''{1}''. However, the input port of ''{2}'' is driven by a signal of this data type</entry>
    <entry key="InvInputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' input port {2,number,integer}</entry>
    <entry key="InvInputStructComplexSignal">Struct signals cannot be complex. Input port {0,number,integer} of ''{1}'' is a signal with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvIsPositiveForEnablePortDType">The enable port signal of ''{0}'' is not being successfully processed by the positive function registered for data type ''{1}''</entry>
    <entry key="InvMPSwtControlPortOutOfBounds">Out of bounds switch input specified for ''{0}''.  The control input must be greater than or equal to 1 and less than or equal to the number of inputs if using one-based indexing; The control input must be greater than or equal to 0 and less than the number of inputs if using zero-based indexing</entry>
    <entry key="InvMPSwtPortDataTypes">Data type mismatch. The dominant data type of input ports of ''{0}'' is ''{1}''. However, the data type of output port is ''{2}''. They should match</entry>
    <entry key="InvNonDoublePortDType">Only ''double'' signals are accepted by block type {0}.  The signals at the ports of ''{1}'' are of data type ''{2}''.</entry>
    <entry key="InvNonFloatPortDType">Only ''single'' or ''double'' signals are accepted by block type {0}.  The signals at the ports of ''{1}'' are of data type ''{2}''.</entry>
    <entry key="InvNumericOrEnumPortDType">{0} does not accept signals of data type ''{1}''. ''{2}'' only accepts numeric and enumerated data types</entry>
    <entry key="InvOPortDTypeChooseIntrinsic">''{0}'' cannot set its output port data type to ''{1}''; one way to avoid this problem is to explicitly choose an intrinsic output data type</entry>
    <entry key="InvOutputBooleanComplexSignal">Boolean signals cannot be complex. Output port {0,number,integer} of ''{1}'' is a ''boolean'' signal. It cannot be complex</entry>
    <entry key="InvOutputEnumTypeComplexSignal">Enumerated signals cannot be complex. Output port {0,number,integer} of ''{1}'' is a signal with enumerated data type ''{2}''. It cannot be complex</entry>
    <entry key="InvOutputFixptComplexSignal">Output port {0,number,integer} of ''{1}'' is a fixed-point signal of data type ''{2}'' with non-zero bias or slope that is not a power of 2. The signal cannot be complex</entry>
    <entry key="InvOutputOpaqueComplexSignal">Opaque signals cannot be complex. Output port {0,number,integer} of ''{1}'' is a signal with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvOutputPortComplexSignalSetting">Output port complex signal mismatch.  Output port {0,number,integer} of ''{1}'' is a {2} signal. Based on the input port complex signal, the output port must be a {3} signal</entry>
    <entry key="InvOutputPortDTypeNotSupported">The output port of {0} does not support the data type ''{1}''. However, the output port of ''{2}'' is driven by a signal of this data type</entry>
    <entry key="InvOutputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' output port {2,number,integer}</entry>
    <entry key="InvOutputStructComplexSignal">Struct signals cannot be complex. Output port {0,number,integer} of ''{1}'' is a signal with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvPortDType">''{0}'' does not support signals of data type ''{1}''. {2} supports only ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double'' built-in data types</entry>
    <entry key="InvPortDTypeFunctionName">''{0}'' function does not support signals of data type ''{1}''. {2} supports only ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double'' built-in data types</entry>
    <entry key="InvPortDTypeSupport">Invalid {0} port data type ''{1}'' in ''{2}''. The data type must be ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvPortDTypeWithoutConvertBetween">The input signal(s) of ''{0}'' may not be of type ''{1}'' because that type has no type conversion function registered</entry>
    <entry key="InvalidDataType">Specified data type ''{0}'' by ''{1}'' is not a valid identifier</entry>
    <entry key="InvalidDataTypeElementIndex">''{0}'' attempts to use invalid element index {1,number,integer} for data type id {2,number,integer}</entry>
    <entry key="InvalidDataTypeId">''{0}'' attempts to use invalid data type id {1,number,integer}</entry>
    <entry key="InvalidDataTypeNumElements">Unable to register data type ''{0}'' for ''{1}'' due to the following error: The number of elements must be greater than zero for this data type.</entry>
    <entry key="InvalidInputPortComplexSignal">Invalid input port numeric type. Numeric type (real or complex) of input port {0,number,integer} of ''{1}'' is invalid</entry>
    <entry key="InvalidInputPortDataType">Invalid input port data type. Data type of input port {0,number,integer} of ''{1}'' is invalid</entry>
    <entry key="InvalidOutputPortComplexSignal">Invalid output port numeric type. Numeric type (real or complex) of output port {0,number,integer} of ''{1}'' is invalid</entry>
    <entry key="InvalidOutputPortDataType">Invalid output port data type. Data type of output port {0,number,integer} of ''{1}'' is invalid.</entry>
    <entry key="InvalidResetInputDataType">Cannot set the reset input port data type of ''{0}'' to ''{1}''. The reset input port data type must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', ''boolean'', or ''ufix1''. Signals of other data types can be converted to these data types by using a Data Type Conversion block.</entry>
    <entry key="InvalidEnableInputDataType">Cannot set the enable input port data type of ''{0}'' to ''{1}''. The enable input port data type must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', ''boolean'', or ''ufix1''. Signals of other data types can be converted to these data types by using a Data Type Conversion block.</entry>
    <entry key="LoggingNonBuiltInSignalNotSupported">Cannot log non-builtin data type signals</entry>
    <entry key="MdlRefInputPortCannotAcceptMixedDataTypeWithHint">Input port cannot accept mixed data types. Input port {0,number,integer} of model block ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of Inport block {2,number,integer} of the referenced model. Alternatively, if this input port is within a function-call model, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="MdlRefInputPortCannotAcceptMixedSignalWithHint">Input port cannot accept mixed numeric types. Input port {0,number,integer} of model block ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of Inport block {2} of the referenced model.  Alternatively, if this input port is within a function-call model, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="MustSpecifyAllOrNoneDWorkNames">Some of data type work vector names of ''{0}'' are not specified.  Either all or none of data type work vector names must be specified</entry>
    <entry key="NonSingleOrDoubleComplexSignal">Input port and output port of ''{0}'' must be of type ''single'' or ''double'' when complex</entry>
    <entry key="NumericType_CannotBeAlias">Unscaled numeric type cannot be an alias data type</entry>
    <entry key="NumericType_DirectUseOfUnscaled">Invalid attempt to use the unscaled numeric type ''{0}'' directly as a data type</entry>
    <entry key="NumericType_DisableIsAlias">Unscaled numeric type cannot be an alias data type. Setting the object''s IsAlias property to false</entry>
    <entry key="NumericType_WarnForOldProperties">Property ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead</entry>
    <entry key="NumericType_WarnForOldProperties2">Property ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead.  If you receive this warning during MAT-file loading, please re-save your MAT-file</entry>
    <entry key="NumericType_WarnForOldMethods">Method ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead</entry>
    <entry key="OpaqueType_Empty_HeaderFile">The data type object ''{0}'' must specify a HeaderFile property</entry>
    <entry key="OpaqueType_Invalid_Size">Invalid Size specified; the Size must be greater than 0</entry>
    <entry key="ObjectInScopeNotBus">Variable or object ''{0}'' in scope from ''{1}'' is not a Simulink.Bus object</entry>
    <entry key="ObjectInScopeNotDataType">Variable or object ''{0}'' in scope from ''{1}'' is not a Simulink.DataType object</entry>
    <entry key="OutputMustBeBoolOrDbl">Cannot set the output port data type of ''{0}'' to ''{1}''.  The output port data type must be either ''double'' or ''boolean''</entry>
    <entry key="OutputMustBeInt8OrDbl">Cannot set the output port {0,number,integer} data type of ''{1}'' to ''{2}''.  The output port data type must be either ''double'' or ''int8''</entry>
    <entry key="OutputPortCannotAcceptMixedDataType">Output port cannot have mixed data types. Output port {0,number,integer} of ''{1}'' expects a signal with unique data type. However, it is driving a signal with elements of differing data types</entry>
    <entry key="OutputPortCannotAcceptMixedDataTypeWithHint">Output port cannot have mixed data types. Output port {0,number,integer} of ''{1}'' expects a signal with unique data type. However, it is driving a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at its output</entry>
    <entry key="OutputPortCannotAcceptMixedSignal">Output port cannot have mixed numeric types. Output port {0,number,integer} of ''{1}'' expects a real or complex signal. However, it is driving a signal that includes both real and complex elements</entry>
    <entry key="OutputPortCannotAcceptMixedSignalWithHint">Output port cannot have mixed numeric types. Output port {0,number,integer} of ''{1}'' expects a real or complex signal. However, it is driving a signal that includes both real and complex elements This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at its output</entry>
    <entry key="OutputPortComplexSignalMismatch">Complex signal mismatch. Output port {0,number,integer} of ''{1}'' is a signal of {2}. However, it is driving a signal of {3}</entry>
    <entry key="OutputPortDataTypeMismatch">Data type mismatch. Output port {0,number,integer} of ''{1}'' is a signal of {2}. However, it is driving a signal of {3}.</entry>
    <entry key="ParameterMustBeZero">''{0}'' cannot specify a nonzero value for parameter {1}.  The parameter needs to be converted to the datatype ''{2}'', which does not have a datatype conversion function registered.  Register a datatype conversion function, or use the value zero</entry>
    <entry key="ParameterNoConversionOfEnums">''{0}'' cannot convert parameter {1} from data type ''{2}'' to data type ''{3}'' because conversion of parameters with enumerated data types is not supported</entry>
    <entry key="ParameterNoConversionOfStructTypes">''{0}'' cannot convert parameter {1} from data type ''{2}'' to data type ''{3}'' because conversion of parameters with struct data types is not supported</entry>
    <entry key="PortComplexSignalMismatch">Port complex signal mismatch.  If any input of {0} is a complex signal, then the output must be a complex signal.  The input port {1,number,integer} of ''{2}'' is a complex signal.  However, the output port is a real signal</entry>
    <entry key="ProdHWPromotion">''{0}'' is configured to automatically select the output data type via internal rule.  It selected an integer data type with at least {1,number,integer} bits.  Based on the production hardware characteristics, this size is not allowed.  To change the production hardware characteristics, select "Configuration Parameters" from the model''s Simulation menu, then select the Hardware Implementation page.</entry>
    <entry key="PropBackwardComplexSignalError">An error occurred while propagating {0} from ''{1}'', input port {2,number,integer}.</entry>
    <entry key="PropBackwardDataTypeError">An error occurred while propagating {0} from ''{1}'', input port {2,number,integer}.</entry>
    <entry key="PropForwardComplexSignalError">An error occurred while propagating {0} from ''{1}'', output port {2,number,integer}.</entry>
    <entry key="PropForwardDataTypeError">An error occurred while propagating {0} from ''{1}'', output port {2,number,integer}.</entry>
    <entry key="RealInputsComplexOutputErr">Output port complex signal mismatch.  If all inputs of {0} are real signals, then the output must be a real signal.  All inputs of ''{1}'' are real signals.  However, the output port is a complex signal</entry>
    <entry key="ReqInvalidDiagnostic">Block {0} requested an invalid diagnostic</entry>
    <entry key="ResetPortsMustBeBoolOrDbl">Cannot set the data type of input port {0,number,integer} of ''{1}'' to ''{2}''. The reset signal of an integrator must be of type ''double'' or ''boolean''. Signals of other data types can be converted to ''double'' or ''boolean'' by using a Data Type Conversion</entry>
    <entry key="SFcnInputPortComplexSignalHasNotBeenSet">Input port complex signal of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnInputPortDataTypeHasNotBeenSet">Input port data type of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnOutputPortComplexSignalHasNotBeenSet">Output port complex signal of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnOutputPortDataTypeHasNotBeenSet">Output port data type of S-function ''{0}'' has not been set properly</entry>
    <entry key="SharedBusAliasedToAnonStruct">Simulink is mapping bus type ''{0}'' to structure type ''{1}'' (defined for a parameter structure). As a result, the bus type cannot be exported. Change the DataScope of the bus object from ''Exported'' to ''Auto''.</entry>
    <entry key="SignedOnlyPortDType">{0} does not accept ''boolean'' or ''unsigned'' signals. The input and output signal(s) of ''{1}'' must be ''int8'', ''int16'', ''int32'', ''single'', or ''double'', or one of the signed fixed-point data types</entry>
    <entry key="SpecificInvConvertBetweenForTriggerPortDType">The trigger signal of ''{0}'' is not being successfully converted from data type ''{1}'' to ''{2}''; {3}</entry>
    <entry key="SpecificInvIsPositiveForEnablePortDType">The enable port signal of ''{0}'' is not being successfully processed by the positive function registered for data type ''{1}''; {2}</entry>
    <entry key="StructElementCannotBeComplexBoolean">Element ''{0}'' of data type ''{1}'' may not be of boolean data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexOpaque">Element ''{0}'' of data type ''{1}'' may not be of opaque data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexStruct">Element ''{0}'' of data type ''{1}'' may not be of struct data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexEnum">Element ''{0}'' of data type ''{1}'' may not be of enumerated data type ''{2}'' since that element is complex</entry>
    <entry key="StructElement_Invalid_DType">Invalid bus type specified for registration: non-numeric element(s) found.</entry>
    <entry key="StructElement_DataTypeEvalErr">Error evaluating DataType property.</entry>
    <entry key="StructElement_DataType_Auto">Invalid DataType specified; DataType may not be set to ''auto''</entry>
    <entry key="StructElement_DataType_FcnCall">Invalid DataType specified; function-call signals are not supported as data types on bus elements.</entry>
    <entry key="StructElement_DataType_Struct">Invalid DataType specified; ''struct'' is not supported as data type on bus elements.</entry>
    <entry key="StructElement_ErrResolvingDataType">Error resolving DataType ''{0}''</entry>
    <entry key="StructElement_Invalid_Name">Invalid Name ''{0}'' specified; Name must be a valid identifier that starts with an alphabetic or ''_'' character, followed by alpha numeric or ''_'' characters. In addition, Name may not start with ''sl_padding''</entry>
    <entry key="StructElement_Invalid_NumDimensions">Invalid ''Dimensions'' property specified. This property must be a double vector consisting of positive elements. Further, for signals of greater than 2 dimensions, the trailing dimension cannot have a value of 1</entry>
    <entry key="StructElement_Invalid_ResolvedDataType">DataType ''{0}'' did not resolve to a valid data type</entry>
    <entry key="StructElement_Invalid_ResolvedDataType_Enum">DataType ''{0}'' did not resolve to a valid enumerated data type</entry>
    <entry key="StructElement_Invalid_ResolvedDataType_Unscaled">DataType ''{0}'' is invalid because it does not contain scaling information</entry>
    <entry key="StructType_Duplicate_Names">Invalid Elements specified; Elements must have unique names</entry>
    <entry key="StructType_Duplicate_Names2">Invalid Elements specified for data type ''{0}''; Elements must have unique names</entry>
    <entry key="StructType_Invalid_Elements">Invalid Elements specified; the Elements must be an empty array, or array of objects of the class Simulink.StructElement</entry>
    <entry key="StructParam_DifferentAttrib">Inconsistent field ''{0}'':\n Expected: {1}\n   Actual: {2}</entry>
    <entry key="StructParam_DifferentNamesOrder">Fields of structure ''{0}'' do not match:\n Expected fields:\n\t {1}\n   Actual fields:\n\t {2}</entry>
    <entry key="StructParam_ExtraNames">Fields of structure ''{0}'' do not match:\n   Extra fields:\n {1} Expected fields:\n\t {2}\n   Actual fields:\n\t {3}</entry>
    <entry key="StructParam_MissedExtraNames">Fields of structure ''{0}'' do not match:\n Missing fields:\n {1}   Extra fields:\n {2} Expected fields:\n\t {3}\n   Actual fields:\n\t {4}</entry>
    <entry key="StructParam_MissedNames">Fields of structure ''{0}'' do not match:\n Missing fields:\n {1} Expected fields:\n\t {2}\n   Actual fields:\n\t {3}</entry>
    <entry key="SwtDataTypeOutputDisagreeRule">An error occurred while the Simulink model was propagating data types. Data type propagation proposed that the Switch block ''{0}'' accept data type ''{1}'' for input port 1 and data type ''{2}'' for input port 2. This Switch block is configured to inherit its output data type via an internal rule which determined that the output data type should be ''{3}''.  However, the data type of the output signal had already been set to ''{4}''. There are several actions you can take to resolve this error. You can change the data type settings for the Switch block. Alternately, you can change the data type settings of the blocks connected to the Switch block''s inputs and/or outputs. You can also insert Data Type Conversion blocks or Signal Specification blocks on the Switch block''s input and/or output signals to resolve data type propagation errors</entry>
    <entry key="TowksCannotLogNonDblOrComplexInMatFormat">The ''matrix'' format is used for data logging of ''{0}''. Logging non-double or complex signal is not supported in ''matrix'' format. Use ''Structure with time'' or ''Structure'' format (see Save Format in parameter dialog)</entry>
    <entry key="TriggerSignalCannotBeEnumType">The trigger signal of ''{0}'' is invalid because it has an enumerated data type ''{1}''</entry>
    <entry key="TriggerPortsMustHaveConvertBetweenRegistered">The trigger signal of ''{0}'' may not be of type ''{1}'' because that type has no type conversion function registered</entry>
    <entry key="UdtDoesNotEvalToDataType">''{0}'' does not resolve to a valid data type for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtDoesNotEvalToEnum">''{0}'' does not resolve to an enumerated data type for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtDoesNotEvalToBus">''{0}'' does not resolve to a Simulink.Bus object for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtEmptyDataType">Parameter ''{0}'' cannot be empty.</entry>
    <entry key="UdtEvalsToFixdtWithNoScaling">''{0}'' resolves to a fixed-point data type with unspecified scaling for parameter ''{1}'' in ''{2}'', but such data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedBuiltin">''{0}'' resolves to a built-in data type, but the parameter ''{1}'' in ''{2}'' does not support this built-in data type.</entry>
    <entry key="UdtEvalsToUnsupportedEnum">''{0}'' resolves to an enumerated data type, but the parameter ''{1}'' in ''{2}'' does not support enumerated data types.</entry>
    <entry key="UdtEvalsToImplicitBus">''{0}'' resolves to a bus data type for parameter ''{1}'' in ''{2}''. However, if you want to specify a bus data type for a block data type parameter, you must do so explicitly by prefixing it with ''Bus: ''.</entry>
    <entry key="UdtEvalsToUnsupportedFixdt">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but fixed-point data types are not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedFixdtScalingMode">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but the scaling mode of the resolved data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedFixdtSignMode">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but the sign mode of the resolved data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedInheritRule">''{0}'' resolves to an inheritance rule, but the parameter ''{1}'' in ''{2}'' does not support this inheritance rule.</entry>
    <entry key="UdtInvBuiltin">''{0}'' specifies a built-in data type for parameter ''{1}'' which does not support it.</entry>
    <entry key="UdtInvEnumName">''{0}'' does not provide a valid enumerated data type name for parameter ''{1}''.</entry>
    <entry key="UdtInvBusName">''{0}'' does not provide a valid bus data type name for parameter ''{1}''.</entry>
    <entry key="UdtInvFixdt">''{0}'' specifies a fixed-point data type for parameter ''{1}'', but the syntax of the expression is incorrect.</entry>
    <entry key="UdtInvInherit">''{0}'' specifies an inheritance rule for parameter ''{1}'' which does not support it.</entry>
    <entry key="UdtInvalidValue">Invalid data type specification in ''{0}''.</entry>
    <entry key="UdtNoEnum">''{0}'' specifies an enumerated data type, but the parameter ''{1}'' does not support enumerated data types.</entry>
    <entry key="UdtNoBus">''{0}'' specifies a bus data type, but the parameter ''{1}'' does not support bus data types.</entry>
    <entry key="UdtReplaceExprHint">''{0}'' is not a valid data type for parameter ''{1}'' in ''{2}''. It needs to be replaced with a MATLAB expression that resolves to a valid Simulink data type object</entry>
    <entry key="UndefinedDataTypeToBeAliasedTo">''{0}'' cannot define data type ''{1}'' to be aliased to id {2,number,integer} because no data type with that id exists</entry>
    <entry key="UnscaledFixptTypeByBlkParam">The data type ''{0}'' specified by block parameter ''{1}'' at ''{2}'' is not valid here because no scaling information is available</entry>
    <entry key="WarnDownCastOfInterfacedVar"><![CDATA[Parameter {0} of ''{1}'' is being cast from data type ''{2}'' to the data type ''{3}''. Downcasts and signed/unsigned mismatches of tunable parameter expressions are not recommended in order to ensure consistent behavior between simulation and generated code<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningEnumSafeCastDetected"><![CDATA[Safe cast detected at time {0} in ''{1}''. Suppressing additional overflow warnings and continuing simulation. You can suppress this message by setting {2}''Configuration Parameters > Diagnostics > Data Validity > Wrap on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningOverFlowDetected"><![CDATA[Wrap on overflow detected at time {0} in ''{1}''. Suppressing additional wrap on overflow warnings and continuing simulation. You can suppress this message by setting {2}''Configuration Parameters > Diagnostics > Data Validity > Wrap on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningSaturationOccurred"><![CDATA[Saturate on overflow detected at time {0} in ''{1}''. Suppressing additional saturate on overflow warnings and continuing simulation. You can suppress this message by setting {2}''Configuration Parameters > Diagnostics > Data Validity >Saturate on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="AbsTimeOverflowDetected"><![CDATA[Overflow condition detected while evaluating absolute time at {0} for model ''{1}''. This indicates the simulation time is greater than the ''Application life span(days)'' specified in the Optimization page of the Configuration Parameters dialog. You can suppress this message by setting {2}''Configuration Parameters > Diagnostics > Data Validity > Wrap on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="RTWOverFlowDetected"><![CDATA[Overflow detected while evaluating the output of ''{0}''. You can suppress this message by setting {1}''Configuration Parameters > Diagnostics > Data Validity > Wrap on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="RTWEnumSafeCastDetected"><![CDATA[Safe cast detected while evaluating the output of ''{0}''. You can suppress this message by setting {1}''Configuration Parameters > Diagnostics > Data Validity > Wrap on overflow''</a> parameter to ''none''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="NumericType_InvalidInput">Input must be of type ''embedded.numerictype''</entry>
    <entry key="NumericType_ScaledDoubleType">Invalid datatype ''Scaled Double'' for Simulink.NumericType object</entry>
    <entry key="EnumDataTypeNotSupportMinMax">Minimum and maximum are not supported for enumerated data type ''{0}''</entry>   
    <entry key="EnumDataTypeNotSupportMinMaxOnBusElement">Minimum and maximum are not supported for enumerated data type ''{0}'' on bus element ''{1}''</entry>
    <entry key="BusDataTypeNotSupportMinMaxOnBusElement">Minimum and maximum are not supported for bus data type. Specify minimum and maximum on leaf elements of bus object ''{0}'' on bus element ''{1}''</entry>
    <entry key="BusElement_Inconsistent">Inconsistent bus element specification</entry>
    <entry key="BusElementMinMaxStrictBusesRequired">To be able to use Minimum and Maximum on bus element, you must first set the diagnostic "Mux blocks used to create bus signals" to ''error''. To do this, go to the Configuration Parameters dialog, select ''Connectivity'' on the left pane, and go to the ''Buses'' control group on the right side panel</entry>
    <entry key="BusElementMinValueMustBeFiniteRealDoubleScalar">Minimum on bus element ''{0}'' must be a finite real double scalar value</entry>
    <entry key="BusElementMaxValueMustBeFiniteRealDoubleScalar">Maximum on bus element ''{0}'' must be a finite real double scalar value</entry>
    <entry key="BusElementMinGreaterThanMax">Minimum ({0}) is greater than maximum ({1}) on bus element ''{2}''</entry>
    <entry key="BusElementMinIsOutOfDTRange">Minimum ({0}) is out of data type range [{1}, {2}] on bus element ''{3}''</entry>
    <entry key="BusElementMaxIsOutOfDTRange">Maximum ({0}) is out of data type range [{1}, {2}] on bus element ''{3}''</entry>
    <entry key="CustomDataTypeNotSupportMinMax">Minimum and maximum are not supported for data type ''{0}'' on bus element ''{1}''</entry>
    <entry key="SpecifyParamsForBestPrecisionMode">Best-precision mode has been specified for the data type parameter ''{0}'' in ''{1}''. In order to calculate the best scaling correctly, at least one of the following block parameters should be specified: ''{2}''</entry>
    <entry key="InvalidDataScope">''{0}'' is not a valid value for DataScope. Values must be one of ''Auto'', ''Exported'', or ''Imported''</entry>
    <entry key="BlockObjectDTONameClashEditTime">''{0}'' is not a valid identifier for parameter ''{1}'' in ''{2}''. Starting identifiers with ''dtoDbl'', ''dtoSgl'', or ''dtoScl'' is not allowed as this name space is reserved for internal use with data type override mode.</entry>
    <entry key="BlockObjectDTONameClashCompileTime">Potential name clash found for identifier ''{0}'' for parameter ''{1}'' in ''{2}''. This error is caused by one of two conditions. First, entering a parameter value that starts with ''dtoDbl'', ''dtoSgl'', or ''dtoScl'' is not allowed as this name space is reserved for internal use with data type override mode. Second, if your model has active data type override settings and the software has created overridden identifier ''{3}'', a variable cannot exist with this same name in any workspace visible to the model.</entry>
    <entry key="NoMatchingDataTypeConstructor">No constructor ''{0}'' with matching signature found.</entry>
    <entry key="setInvalidUse">You cannot use SET to change the properties of a {0} object; \n use dot notation instead.</entry> 
    <entry key="UndefinedMethod">No method ''{0}'' with matching signature found for class ''{1}''.</entry>
    <entry key="AbstractAttribute">Abstract classes cannot be instantiated.  Class ''{0}'' is declared as Abstract.</entry>    
    <entry key="OldDataTypeSpecificationBlock">A data type has been specified using the old structure format. Support for this format will be removed in a future release. Numeric type objects are the preferred form of specification.  To construct a Numeric Type object use NUMERICTYPE or FIXDT. To convert a legacy structure specification to a numeric type object see FIXDTUPDATE.  The data type was used by ''{0}''.</entry>
    <entry key="OldDataTypeSpecification">A data type has been specified using the old structure format. Support for this format will be removed in a future release. Numeric type objects are the preferred form of specification.  To construct a Numeric Type object use NUMERICTYPE or FIXDT. To convert a legacy structure specification to a numeric type object see FIXDTUPDATE.</entry>
    <entry key="RefreshDataTypeInWorkspace">--- Refresh data types ---</entry>
  </message>
</rsccat>

<!-- LocalWords:  xml UTF CDATA Datatype datatype Downcasts nonvirtual dworks
-->

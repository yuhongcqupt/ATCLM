<?xml version="1.0"?>
<!-- Copyright 2011-2015 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="parallel" string_type_for_hole="mixed">
  <message>
    <!-- Please keep entries in sorted order -->
    <entry key="ASSERTION">An assertion failed during GPU execution.</entry>
    <entry key="AccumarrayBadFillvalInput">Fifth input FILLVAL must be a full double, single, or logical scalar.</entry>
    <entry key="AccumarrayBadValInput">Second input VAL must be a full double, single, or logical vector or scalar.</entry>
    <entry key="AccumarrayUnsupportedFunction">Function ''{0}'' is not supported.</entry>
    <entry key="AllocFailed">The GPU failed to allocate memory. To continue, reset the GPU by running 'gpuDevice({0,number,integer})'. If this problem persists, partition your computations into smaller pieces.</entry>
    <entry key="ArrayfunUnsupportedParameter">The parameters 'UniformOutput' and 'ErrorHandler' are not supported when executing ARRAYFUN on a GPU.</entry>
    <entry key="AttributeNotFound">Attribute {0} not supported.</entry>
    <entry key="BITGETSET">The BIT input is out of range for the datatype specified.</entry>
    <entry key="BLASCUDAErrorLAPACK">Call to {0} on the GPU failed with CUDA error status: {1}.</entry>
    <entry key="BLASErrorLAPACK">Call to {0} on the GPU failed with error status: {1}.</entry>
    <entry key="BLASInitFailedLAPACK">Failed to initialize GPU BLAS library.</entry>
    <entry key="BLASThreadSyncFailedLAPACK">Call to {0} on the GPU failed with error status: {1}.</entry>
    <entry key="BadCount">Invalid number of objects.</entry>
    <entry key="BadDataType">GPU arrays support only fundamental numeric or logical data types.</entry>
    <entry key="BadSize">A vector with 2 or more elements is required to specify dimensions.</entry>
    <entry key="BadType">Unknown C type name: {0}.</entry>
    <entry key="BandwidthBadType">First input must be a double or single matrix.</entry> 
    <entry key="BesselNu">The NU input (first argument) to {0} must be a positive integral value.</entry>
    <entry key="BesselNuOutOfRange">The NU input (first argument) to {0} must have magnitude less than 2^31.</entry>
    <entry key="BesselyValue">The X input (second argument) to bessely must be a positive real value.</entry>
    <entry key="BinaryOpNumInputs">The function ''{0}'' requires exactly two inputs, but {1,number,integer} were provided.</entry>
    <entry key="BinaryOpNumOutputs">The function ''{0}'' returns exactly one output, but {1,number,integer} were requested.</entry>
    <entry key="BitopUnsupportedNumInputs">{0} takes two inputs. {1,number,integer} were supplied.</entry>
    <entry key="BuildInvalidSize">Dimension inputs must be numeric.</entry>
    <entry key="BuildMustBeFloatingPoint">Trailing input must be ''single'' or ''double''.</entry>
    <entry key="BuildMustBeNumericClass">Trailing input must be a valid numeric class name.</entry>
    <entry key="BuiltinNotSupported">The first argument must be a function handle bound to a MATLAB file (.m extension), or to an anonymous function. Instead, use ''{0}'' with GPUArray input.</entry>
    <entry key="CUBLASError">Call to {0} in CUBLAS failed with error status: {1}.</entry>
    <entry key="CUBLASInitFailed">Failed to initialize GPU BLAS library.</entry>
    <entry key="CUBLASShutdownFailed">Failed to shutdown GPU BLAS library.</entry>
    <entry key="CastComplexToReal">Removing complexity during a cast is not supported.</entry>
    <entry key="CholPosdef">Matrix must be positive definite.</entry>
    <entry key="CholTooManyInputs">GPU support for chol expects a maximum of 2 input arguments.</entry>
    <entry key="CholTooManyOutputs">GPU support for chol expects a maximum of 2 output arguments.</entry>
    <entry key="ColonNonNumericOperand">Colon operands must be numeric types.</entry>
    <entry key="ColonPmaxsize">Maximum variable size allowed by the program is exceeded.</entry>
    <entry key="ComplexInput">Inputs must be numeric, real, and full.</entry>
    <entry key="ComplexIntegersNotSupported">{0} does not support complex integer data input.</entry>
    <entry key="ConcatenationIntegerInteraction">Concatenation with dominant (left-most) integer class may overflow other operands on conversion to return class.</entry>
    <entry key="CondMatrixWithNaNInf">For COND(X) or COND(X,2), X must not contain NaN or Inf.</entry>
    <entry key="CondNormMismatchSizeA">A is rectangular.  Use the 2 norm.</entry>
    <entry key="Conv2FirstTwoInputsNotVectors">HCOL and HROW must be vectors.</entry>
    <entry key="Conv2MixedDevicesNotSupported">All inputs must be stored on the same GPU device.</entry>
    <entry key="Conv2NotFloatSeparable">HCOL, HROW, and A must all be float arrays (single or double).</entry>
    <entry key="ConvAorBNotVector">A and B must be vectors.</entry>
    <entry key="ConvolutionNotFloat">A and B must be float arrays (single or double).</entry>
    <entry key="ConvolutionUnknownShapeParameter">The SHAPE argument must be ''full'', ''same'', or ''valid''.</entry>
    <entry key="Copy2DDeviceToHost">An error occurred while transferring data from GPU to CPU memory.</entry>
    <entry key="Copy2DHostToDevice">An error occurred while transferring data from CPU to GPU memory.</entry>
    <entry key="DatautilsMixedDevicesNotSupported">All inputs must be stored on the same GPU device.</entry>
    <entry key="DatautilsMustBe2D">All input arrays must be two-dimensional.</entry>
    <entry key="DatautilsMustBe2DAndSquare">Matrix must be square.</entry>
    <entry key="DatautilsMustBeFinite">Input arrays must not contain NaN or Inf.</entry>
    <entry key="DatautilsNotEnoughHostMem">Not enough memory is available on the CPU to create an array of size {0,number,integer} x {1,number,integer}.</entry>
    <entry key="DatautilsOnlyFloatSupported">All input arrays must be floating-point (single or double).</entry>
    <entry key="DiagUnsupportedNDims">First input must be 2D for DIAG.</entry>
    <entry key="DiffPositiveInt">Difference order for {0} must be a positive integer scalar.</entry>
    <entry key="DotInputSizeMismatch">Inputs must be the same size.</entry>
    <entry key="DotInvalidInput">DOT is supported only for vector input.</entry>
    <entry key="EXPINT">EXPINT: needs to return a complex result, but this is not supported for real input X on the GPU. Use EXPINT(COMPLEX(X)) instead.</entry>
    <entry key="EigNoConvergence">EIG did not converge at index = {0,number,integer}.</entry>
    <entry key="EigNonSymmetricEigFailed">EIG on the GPU failed with error code {0,number,integer}.</entry>
    <entry key="EigNotEnoughHostMem">Not enough host-side memory is available for EIG.</entry>
    <entry key="EigNotEnoughHostMemForVals">Not enough host-side memory is available for EIG.</entry>
    <entry key="EigSymmetricEigFailed">EIG on the GPU failed with error code {0,number,integer}.</entry>
    <entry key="EigTooManyInputs">GPU support for EIG is available only for the 1 input argument syntax.</entry>
    <entry key="EigTransferMatrixToDevice">An error occurred in EIG while transferring data from the host to the device.</entry>
    <entry key="EigTransferToHost">An error occurred in EIG while transferring data from the device to the host.</entry>
    <entry key="EigTransferVectorToDevice">An error occurred in EIG while transferring data from the host to the device.</entry>
    <entry key="EyeTooManyDims">EYE does not support more than two dimension arguments.</entry>
    <entry key="FFT2InvalidSyntax">You must specify sizes for both dimensions.</entry>
    <entry key="FFTExecFailed">MATLAB encountered an unexpected error in evaluation on the GPU. If you continue to see this error, reset the GPU device or restart MATLAB and try again.</entry>
    <entry key="FFTInternalError">MATLAB encountered an internal error in evaluation on the GPU.</entry>
    <entry key="FFTInvalidDimension">The third argument, specifying the dimension, must be an integer value greater than 0.</entry>
    <entry key="FFTInvalidPlan">An invalid FFT plan was used on the GPU.</entry>
    <entry key="FFTInvalidSize">MATLAB was unable to run an FFT on the GPU of that size.</entry>
    <entry key="FFTInvalidType">An invalid data type was used on the GPU.</entry>
    <entry key="FFTInvalidValue">An invalid array was used on the GPU.</entry>
    <entry key="FFTNInvalidSize">The second argument to {0} specifies the output size, and must have at least as many elements as there are dimensions of the first argument array.</entry>
    <entry key="FFTSetupFailed">MATLAB was unable to initialize the GPU FFT library.</entry>
    <entry key="FFTUnalignedData">MATLAB unexpectedly encountered a data alignment error on the GPU.</entry>
    <entry key="FFTUnknownError">An unknown error ({0,number,integer}) was encountered during FFT on the GPU.</entry>
    <entry key="FLINT">Inputs must have integer values.</entry>
    <entry key="FactorizationSingular">The input is singular to working precision.</entry>
    <entry key="FilterAFiniteNonZero">The first element of the second input argument must be finite and nonzero.</entry>
    <entry key="FilterNonFloat">The value arguments to {0} must be double or single.</entry>
    <entry key="FilterNotVectorInput">The first two input arguments to {0} must be vectors.</entry>
    <entry key="FilterUnsupportedLength">When the second input argument to {0} is a vector, then the first two input arguments are each limited to {1,number,integer} elements.</entry>
    <entry key="FirstArgumentMustBeGpu">The first argument must be a GPUArray.</entry>
    <entry key="FreqspaceArg1NotReal">First argument must be real.</entry>
    <entry key="FreqspaceArg2NotStr">Second argument must be a string or character vector.</entry>
    <entry key="FunfunFirstArgFcnHandle">The first argument must be a function handle.</entry>
    <entry key="FunfunUnsupportedFunction">Only MATLAB function handles bound to simple, sub, nested, and anonymous functions are supported on the GPU.</entry>
    <entry key="GpuexecUnexpectedError">An unexpected error occurred while preparing to execute {0}.</entry>
    <entry key="INTERRUPTED">Kernel execution has been interrupted. To continue, reset the GPU with the 'gpuDevice' function, or restart MATLAB.</entry>
    <entry key="INVALIDOBJECT">Attempting to access the property or method of an invalid object.</entry>
    <entry key="IPOWER">POWER: Integers can only be raised to non-negative integral powers.</entry>
    <entry key="IllegalComplex">Argument cannot be complex.</entry>
    <entry key="IndexingBadIndexType">Only () is supported when indexing into {0}.</entry>
    <entry key="IndexingBadSubstruct">Subscript arguments to SUBSREF and SUBSASGN must be a structure.</entry>
    <entry key="IndexingMissingFields">Subscript arguments to SUBSREF and SUBSASGN must have two fields whose names are ''type'' and ''subs''.</entry>
    <entry key="IndexingSubsMustBeCell">The ''subs'' field for the subscript argument to SUBSREF and SUBSASGN must be a cell array.</entry>
    <entry key="IndexingTypeMustBeCharArray">The ''type'' field for the subscript argument to SUBSREF and SUBSASGN must be a character array.</entry>
    <entry key="InsufficientMem">Maximum amount of memory supported by the device is exceeded.</entry>
    <entry key="InternalError">An error occurred extracting function information.</entry>
    <entry key="InternalOutOfMemory">Out of Memory.</entry>
    <entry key="Interp3WrongInputNumber">Wrong number of input arguments. </entry>
    <entry key="InterpCubic3PointsRule">Cubic interpolation requires at least 3 points in each dimension.</entry>
    <entry key="InterpCubicExtrapNotSupported">Cubic interpolation does not support extrapolation.</entry>
    <entry key="InterpExtrapArgInvalid">The extrapolation method or out of boundary value is invalid.</entry>
    <entry key="InterpExtrapolationNotSupported">The extrapolation for the out-of-boundary input is not supported.</entry>
    <entry key="InterpGridArgInvalid">The grid (first argument) must be a finite increasing vector without repeating elements.</entry>
    <entry key="InterpGridArgNotMeshGrid">The grid array inputs must align with Cartesian axes as if they were produced by meshgrid.</entry>
    <entry key="InterpGridArgNotSameType">Grid arguments must have the same data type. They can either be double or single.</entry>
    <entry key="InterpGridArrayInvalid">Input grid is not a valid MESHGRID. The grid array inputs must be finite with increasing and non-repeating elements in corresponding dimension.</entry>
    <entry key="InterpGridCubicNotUniform">The grid (first argument) must be a finite increasing vector with uniform distance between points.</entry>
    <entry key="InterpGridInvalidLength">Interpolation requires at least two sample points in each dimension.</entry>
    <entry key="InterpGridNotRealFloat">Grid argument must be real double or single.</entry>
    <entry key="InterpGridSizeInconsistent">The dimensions of the grid inputs must be consistent with those of the value input.</entry>
    <entry key="InterpGridValueDimMismatch"> The length of the grid (first argument) must be same as the first non-singleton dimension size of the value (second argument).</entry>
    <entry key="InterpGridVecInvalid">The grid vector inputs must be finite with increasing and non-repeating elements.</entry>
    <entry key="InterpInputsNotNumeric">The first {0, number,integer} inputs must be numeric arrays.</entry>
    <entry key="InterpInvalidInputArgs">The input arguments are invalid. For supported syntaxes, see help gpuArray.{0}.</entry>
    <entry key="InterpMethodCubicNotSupportedOnSM13">'CUBIC' interpolation method is not supported on GPUs with compute capability less than 2.0.</entry>
    <entry key="InterpMethodInvalid">Input argument #{0,number,integer} must specify interpolation method. The specified interpolation method is invalid. Only {1} interpolation methods are supported for gpuArray.</entry>
    <entry key="InterpMethodNotSupported">Only {0} interpolation methods are supported. {1} method is not supported for gpuArray.</entry>
    <entry key="InterpQueryArgInvalid">Query argument must be a real double or single numeric array.</entry>
    <entry key="InterpQueryArgNotSameType">Query arguments must have the same data type. They can either be double or single.</entry>
    <entry key="InterpQuerySizeInvalid">The query arguments must be all arrays or all vectors. If query inputs are arrays, they must be the same size. If they are vectors with different lengths, they must have different orientations.</entry>
    <entry key="InterpValueArgBadDim">The dimensions of value argument is invalid. Degenerated value is not allowed.</entry>
    <entry key="InterpValueArgInvalid">Value argument must be a double or single vector.</entry>
    <entry key="InterpValueArgInvalidDim">The number of dimensions of value argument must be {0,number,integer}.</entry>
    <entry key="InterpnInputsNotNumeric">The first {0, number,integer} inputs must be numeric arrays. NTIMES syntax is not supported for 1D value input.</entry>
    <entry key="InterpnNotEnoughArgs">Not enough input arguments, see help gpuArray.interpn.</entry>
    <entry key="InterpnUnsupported">Interpn supports only up to 5 dimensions.</entry>
    <entry key="InvFailed">INV failed with error code {0,number,integer}.</entry>
    <entry key="InvalidData">The data no longer exists on the device.</entry>
    <entry key="InvalidElementCount">Value out of range for element count.</entry>
    <entry key="InvalidFunction">Only function handles bound to MATLAB files containing function definitions are supported.</entry>
    <entry key="InvalidInputsDataType">Both inputs must be the same class, unless one is double. </entry>
    <entry key="InvalidMatrixNormType">The specified matrix norm type is invalid. The supported norms are 1, 2, inf and ''fro''.</entry>
    <entry key="InvalidType">Invalid input argument type ''{0}''.</entry>
    <entry key="InvalidTypeUnknown">Invalid input argument type.</entry>
    <entry key="InvalidValue">Value out of range.</entry>
    <entry key="InvalidVectorNormType">The specified vector norm type is invalid. The supported norms are inf, -inf, ''fro'', and p where p is a double or single value that is greater than or equal to 1.</entry>
    <entry key="IpermuteNotImplemented">IPERMUTE is not implemented for GPUArray.</entry>
    <entry key="IsMemberAandBColnumAgree">Inputs A and B must be matrices with the same number of columns in the 'rows' case.</entry>
    <entry key="IsMemberNotAMatrix">Inputs A and B must be matrices with the same number of columns in the 'rows' case.</entry>
    <entry key="IsMemberRepeatedFlag">You cannot specify the ''{0}'' flag more than once.</entry>
    <entry key="IsMemberUnknownInput">Unrecognized flag ''{0}''. Valid flags are ''rows'' and ''R2012a''.</entry>
    <entry key="IsSortedComplexIntegersObsolete"> ISSORTED on complex inputs with integer class is obsolete. Please use ISSORTED(DOUBLE(X)) or ISSORTED(SINGLE(X)) instead.</entry>
    <entry key="IsSortedInvalidInput"> ISSORTED input must be a vector.</entry>
    <entry key="IsSortedUnsupportedMatrixIn">{0} does not support two inputs.</entry>
    <entry key="IsaUnderlyingClassInput">Second input to ISAUNDERLYING must be of char type.</entry>
    <entry key="KthDiagInputNotFinite">K-th diagonal input must be finite.</entry>
    <entry key="KthDiagInputNotInteger">K-th diagonal input must be a real integer scalar.</entry>
    <entry key="LAPACKInitFailed">Failed to initialize GPU LAPACK library</entry>
    <entry key="LAPACKShutdownFailed">Failed to shutdown GPU LAPACK library</entry>
    <entry key="LOG">LOG: needs to return a complex result, but this is not supported for real input X on the GPU. Use LOG(COMPLEX(X)) instead.</entry>
    <entry key="LOG10">LOG10: needs to return a complex result, but this is not supported for real input X on the GPU. Use LOG10(COMPLEX(X)) instead.</entry>
    <entry key="LOG1P">LOG1P: needs to return a complex result, but this is not supported for real input X on the GPU. Use LOG1P(COMPLEX(X)) instead.</entry>
    <entry key="LOG2">LOG2: needs to return a complex result, but this is not supported for real input X on the GPU. Use LOG2(COMPLEX(X)) instead.</entry>
    <entry key="LinLogspaceNonFiniteRealScalar">The third argument (size) to {0} must be a finite numeric real scalar.</entry>
    <entry key="LinLogspaceNonFloatScalar">The value arguments to {0} must be double or single scalars.</entry>
    <entry key="LoadInvalid">Invalid data for loading an object of class {0}.</entry>
    <entry key="LoadVersionMismatch">A problem was encountered loading an object of class {0}. The storage format version from the file ({1}) cannot be loaded because it is not compatible with the current storage format version ({2,number,integer}).</entry>
    <entry key="LogicalNaN">NaN's cannot be converted to logical.</entry>
    <entry key="LuBadPermutationFlag">Permutation flag must be ''matrix'' or ''vector''.</entry>
    <entry key="LuFactFailed">The LU factorization failed with error code {0,number,integer}.</entry>
    <entry key="LuNumInputsNotSupported">The three input syntax for LU is not supported on the GPU.</entry>
    <entry key="LuNumOutputsNotSupported">LU on the GPU requires either two or three outputs.</entry>
    <entry key="LuSolveFailed">MLDIVIDE failed with error code {0,number,integer}.</entry>
    <entry key="MAGMACHOLFactFailed">The Cholesky factorization failed with error code {0,number,integer}.</entry>
    <entry key="MATLABFcnNotFound">MATLAB encountered an unexpected error in evaluation on the GPU.\nThis could be caused by an invalid path or a corrupted MATLAB installation.</entry>
    <entry key="MeshNdgridNotEnoughInputs">Not enough input arguments.</entry>
    <entry key="MustBeRealNonNegativeScalar">{0} must be a real non-negative scalar.</entry>
    <entry key="MustBeRealNonNegativeScalarFlint">Double inputs must be non-negative integer scalars.</entry>
    <entry key="MustBeRealPositiveScalarInteger">{0} must be a positive integer scalar.</entry>
    <entry key="MustBeRealScalar">{0} must be a real scalar.</entry>
    <entry key="MustBeRealScalarInteger">{0} must be an integer scalar.</entry>
    <entry key="NeedsComplexResult">{0}: needs to return a complex result, but this is not supported for real input X on the GPU. Use {1}(COMPLEX(X)) instead.</entry>
    <entry key="NoComplexLogicals">Complex logical GPU arrays are not supported.</entry>
    <entry key="NoLongerExists">Data no longer exists on the GPU.</entry>
    <entry key="NoPCTLicense">The GPU functionality requires a Parallel Computing Toolbox license.</entry>
    <entry key="NoPointer">Unexpectedly failed to access GPUArray contents.</entry>
    <entry key="NonNegativeInputs">Inputs to {0} must be nonnegative.</entry>
    <entry key="NonNegativeSize">Size elements must be nonnegative.</entry>
    <entry key="NormNon2DFloat">Input data must be a double or single vector or 2D matrix.</entry>
    <entry key="NormestInvalidMatrix">NORMEST is only supported for 2D full floating point arrays.</entry>
    <entry key="NotRealInt">Size arguments must be real integers.</entry>
    <entry key="NthRootNegXNotOddIntegerN">If X is negative, N must be an odd integer.</entry>
    <entry key="OOM">Out of memory on device. To view more detail about available memory on the GPU, use 'gpuDevice()'. If the problem persists, reset the GPU by calling 'gpuDevice({0,number,integer})'.</entry>
    <entry key="OOMForOperation">Out of memory on device. MATLAB was unable to allocate sufficient resources on the GPU to complete this operation. If the problem persists, reset the GPU by calling 'gpuDevice({0,number,integer})'.</entry>
    <entry key="OpaqueNotSupported">Package functions and MCOS class methods are unsupported.</entry>
    <entry key="OutOfRangeMixedType">The double input value must be within the limits of the integer input type.</entry>
    <entry key="POWER">POWER: needs to return a complex result, but this is not supported for real input X and Y on the GPU. Use POWER(COMPLEX(X),COMPLEX(Y,0)) instead.</entry>
    <entry key="PagefunBetaGammaTail">The TAIL argument is not supported when using '@{0}' with PAGEFUN.</entry>
    <entry key="PagefunDataMustBeOnDevice">Input data must be on the GPU when using PAGEFUN.</entry>
    <entry key="PagefunElementWiseDimMismatch">When executing PAGEFUN(FUN, A, B) where FUN is an element-wise operation, each page of A and B must be the same size or one input must have scalar pages. However, each page of A is {0,number,integer}-by-{1,number,integer}, and each page of B is {2,number,integer}-by-{3,number,integer}.</entry>
    <entry key="PagefunFactorizationInvalidParam">An invalid parameter was encountered when using {0} with PAGEFUN.</entry>
    <entry key="PagefunFactorizationSingular">One or more pages of the input are singular to working precision.</entry>
    <entry key="PagefunMdivideSquare">The number of rows and columns of each page of the divisor must be equal when using MLDIVIDE or MRDIVIDE with PAGEFUN.</entry>
    <entry key="PagefunMinMaxNaNMode">The MISSING argument is not supported when using '@{0}' with PAGEFUN.</entry>
    <entry key="PagefunUnsupportedMinMaxReduction">PAGEFUN requires two numeric input arguments after '@{0}'.</entry>
    <entry key="PagefunUnsupportedOperation">PAGEFUN does not support the specified function ''{0}''.</entry>
    <entry key="PinnedMemoryAllocError">Unable to allocate the amount of host memory requested.</entry>
    <entry key="PinnedMemoryFinalizeError">An error occurred while setting up host memory: {0}.</entry>
    <entry key="QRConstructQFailed">The QR factorization failed while computing Q (error code {0,number,integer}).</entry>
    <entry key="QRFactFailed">The QR factorization failed with error code {0,number,integer}.</entry>
    <entry key="QRSolveFailed">MLDIVIDE failed with error code {0}.</entry>
    <entry key="QRSolveNotEnoughMem">Not enough host-side memory is available to allocate the workspace for MLDIVIDE.</entry>
    <entry key="QrBadEconomyFlag">Second argument to QR must be the value zero.</entry>
    <entry key="QrNumInputsNotSupported">The three input argument syntax for QR is not supported on the GPU.</entry>
    <entry key="QrNumOutputsNotSupported">QR on the GPU requires exactly two outputs.</entry>
    <entry key="RANDI">RANDI: IMAX must be greater than or equal to IMIN.</entry>
    <entry key="REALLOG">REALLOG: REALLOG produced complex result.</entry>
    <entry key="REALPOW">REALPOW: REALPOW produced complex result.</entry>
    <entry key="REALSQRT">REALSQRT: REALSQRT produced complex result.</entry>
    <entry key="RandInvalidOutputType">Output class must be ''single'' or ''double''.</entry>
    <entry key="RandInvalidRNGType">Random number generator not recognized: {0}.</entry>
    <entry key="RandPermKUnsupported">The K input is not supported for RANDPERM on the GPU.</entry>
    <entry key="RandiImaxLessThanImin">IMAX must be greater than or equal to IMIN.</entry>
    <entry key="RandiImaxLessThanOne">IMAX must be greater than or equal to 1.</entry>
    <entry key="RandiIminImaxInteger">IMIN and IMAX must be integer values.</entry>
    <entry key="RandiInputType">First input must be a scalar or have two elements.</entry>
    <entry key="RandiLimitsTooLarge">IMIN and IMAX must be less than 2^53.</entry>
    <entry key="RandiOutputType">Output of class ''{0}'' is not supported.</entry>
    <entry key="RandiRangeTooLarge">IMIN and IMAX must differ by less than 2^53-1.</entry>
    <entry key="SQRT">SQRT: needs to return a complex result, but this is not supported for real input X on the GPU. Use SQRT(COMPLEX(X)) instead.</entry>
    <entry key="SUBSASGN">SUBSASGN: SUBSASGN on a GPUArray produced an out-of-bounds index.</entry>
    <entry key="SUBSREF">SUBSREF: SUBSREF on a GPUArray produced an out-of-bounds index.</entry>
    <entry key="SetOpsUnsupportedFlag">Unsupported flag ''{0}''. Valid flags are 'stable', 'sorted'.</entry>
    <entry key="SingletonDimensionMismatch">Non-singleton dimensions of input arrays must match each other.</entry>
    <entry key="SingletonPageDimensionMismatch">Non-singleton page dimensions of input arrays must match each other.</entry>
    <entry key="SortrowsCOLmismatchX">COL must be a vector of column indices into X.</entry>
    <entry key="SparseClassUnsupported">Sparse gpuArrays support only double-precision data.</entry>
    <entry key="SparseDimsUnsupported">Only vectors and 2D matrices can be converted to sparse gpuArrays.</entry>
    <entry key="SparseLibraryError">An unexpected error occurred on the device. The error code was: {0}.</entry>
    <entry key="SparseMtimesNotImplemented">Full matrices cannot be multiplied by sparse matrices.</entry>
    <entry key="SparseNotSupported">Sparse gpuArrays are not supported for this function.</entry>
    <entry key="SparseSolverM2NotSupported">When the first input argument is a sparse matrix, the second preconditioner cannot be a matrix. Use functions for both preconditioners, or multiply the precondition matrices into one matrix.</entry>
    <entry key="SparseSolverPreconditionersNotSupported">A sparse matrix preconditioner is supported only when the first input argument is a sparse matrix.</entry>
    <entry key="SpfunFirstArgFcn">The first argument to SPFUN must be a function name or a function_handle.</entry>
    <entry key="SpfunNdInput">ND-sparse arrays are not supported.</entry>
    <entry key="SprandTwoInputs">Too many or not enough input arguments.</entry>
    <entry key="Sub2IndInvalidSize">Size vector must have at least 2 elements.</entry>
    <entry key="Sub2IndSubscriptComplexity">The subscript vectors must not be complex.</entry>
    <entry key="Sub2IndSubscriptIndexOutOfRange">Out of range subscript.</entry>
    <entry key="Sub2IndSubscriptVectorSize">The subscript vectors must all be of the same size.</entry>
    <entry key="SubsasgnSubscriptNotUnique">When assigning into a GPUArray, the subscripts must contain unique values. Subscript {0,number,integer} contained repeated values.</entry>
    <entry key="SvdBadEconomyFlag">Second argument to SVD must be ''econ'' or the value zero.</entry>
    <entry key="SvdFactoringFailed">SVD on the GPU failed with error code {0,number,integer}.</entry>
    <entry key="SvdNoConvergence">SVD did not converge at index = {0,number,integer}.</entry>
    <entry key="SvdNotEnoughHostMem">Not enough host-side memory is available for SVD.</entry>
    <entry key="SvdNotEnoughHostMemForVals">Not enough host-side memory is available for SVD.</entry>
    <entry key="SvdTransferHostToDevice">An error occurred in SVD while transferring data from the host to the device.</entry>
    <entry key="SvdTransferToHost">An error occurred in SVD while transferring data from the device to the host.</entry>
    <entry key="TooFewInputs">{0} takes at least {1,number,integer} inputs. {2,number,integer} were supplied.</entry>
    <entry key="TooManyInputs">{0} takes at most {1,number,integer} inputs. {2,number,integer} were supplied.</entry>
    <entry key="TooManyOutputs">Too many output arguments requested.</entry>
    <entry key="TrilTriuUnsupportedNDims">First input must be 2D.</entry>
    <entry key="UNKNOWN">An unknown error occurred.</entry>
    <entry key="USERINTERRUPTED">Kernel execution has been interrupted. To continue, reset the GPU with the 'gpuDevice' function, or restart MATLAB.</entry>
    <entry key="UniqueANotMatrix">Input A must be a matrix in the 'rows' case.</entry>
    <entry key="UniqueOccurenceConflict"> You can specify either 'first' or 'last' but not both.</entry>
    <entry key="UniqueRepeatedFlag">You cannot specify the ''{0}'' flag more than once.</entry>
    <entry key="UniqueSetOrderConflict">You can specify either 'sorted' or 'stable' but not both.</entry>
    <entry key="UniqueSetOrderOccurrence">You cannot specify 'stable' and 'sorted' with 'first' and 'last'.</entry>
    <entry key="UniqueUnsupportedFlag">Unsupported flag ''{0}''. Valid flags are 'rows', 'first', 'last', 'stable', 'sorted' .</entry>
    <entry key="UnknownCopyError">An unknown error occurred copying data to the GPU.</entry>
    <entry key="UnknownDataType">Unknown or unsupported data type: {0}.</entry>
    <entry key="UnresolvedFunction">Unable to resolve the function handle.</entry>
    <entry key="Unsupported64BitType">Input arguments of type ''int64'' or ''uint64'' are not supported.</entry>
    <entry key="WrongNumInputs">This function requires {0,number,integer} inputs.</entry>
    <entry key="invalidUnderlyingClass">Expected {0} to be a gpuArray with one of the following underlying classes:\n\n{1}\n\nInstead its underlying class was {2}.</entry>
    <entry key="pmaxsize">Maximum variable size allowed on the device is exceeded.</entry>
  </message>
</rsccat><!-- LocalWords:  BLAS CUBLAS HCOL HROW IMAX IMIN RNG NTIMES 
-->

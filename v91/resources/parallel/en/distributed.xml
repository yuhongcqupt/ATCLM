<?xml version="1.0"?>
<!-- Copyright 2011-2016 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="parallel">
  <message>
    <entry key="AcosdComplexInput">Argument should be real.</entry>
    <entry key="AcotdComplexInput">Argument should be real.</entry>
    <entry key="AcscdComplexInput">Argument should be real.</entry>
    <entry key="AllTableArgsDistributed">When constructing a distributed table, all data arguments must be distributed arrays.</entry>
    <entry key="AllocatorBadType">Unhandled creation type: {0} in Allocator.</entry>
    <entry key="AllocatorNoFunctionHandle">Arrays of function handles are not supported.</entry>
    <entry key="AllocatorUnsupportedClass">Distributed arrays are only supported for LOGICAL, CHAR, NUMERIC, CELL and STRUCT.</entry>
    <entry key="AllocatorUnsupportedSparseNdims">Cannot create sparse {0,number,integer}-D array.  Only sparse vectors and matrices are supported.</entry>
    <entry key="ArrayDescriptorInvalidInput">Input matrix must be codistributed.</entry>
    <entry key="ArrayDescriptorInvalidInputCodist">Input matrix must be distributed according to the ''codistributor2dbc'' scheme.</entry>
    <entry key="ArrayfunFunctionHandleRequired">The first input to ARRAYFUN must be a function handle.</entry>
    <entry key="ArrayfunInputsMustBeSameSize">ARRAYFUN expects all array inputs to be of the same size.</entry>
    <entry key="AsecdComplexInput">Argument should be real.</entry>
    <entry key="AsindComplexInput">Argument should be real.</entry>
    <entry key="AtandComplexInput">Argument should be real.</entry>
    <entry key="BadCommFlag">If present, third input argument must be ''noCommunication''.</entry>
    <entry key="BadDimension">Dimension argument must be a positive integer scalar within indexing range.</entry>
    <entry key="BadRangeForTransferPortion">An invalid range was specified for transferPortion.</entry>
    <entry key="BadValueForAssignPortion">The value specified for assignPortion does not match the specified range.</entry>
    <entry key="BuildArgInvalidSize">Invalid size [{0,number,integer}, {1,number,integer}] for argument to "{2}".</entry>
    <entry key="BuildArgScalarVector">Numeric arguments to "{0}" must be scalars or vectors.</entry>
    <entry key="BuildArgsBadCodistributorPosition">When provided, codistributor must either be the last argument, or the second to last argument, followed by ''{0}''.</entry>
    <entry key="BuildArgsBadSizesInput">Size inputs must be non-negative and integer-valued.</entry>
    <entry key="BuildArgsRowVectorSizes">Size inputs must be a numeric row vector.</entry>
    <entry key="BuildArgsScalarSizes">Size inputs must be numeric scalars.</entry>
    <entry key="BuildBadClassName">Unsupported output class for "{0}": {1}</entry>
    <entry key="BuildFromIncomplete">The codistributor must be complete for building a codistributed array from local parts.</entry>
    <entry key="BuildGatheringDistributed">gathering a distributed for build.</entry>
    <entry key="BuildInvalidArgumentType">An unsupported input argument for "{0}" was encountered.  This function expects all inputs to be numeric.</entry>
    <entry key="BuildInvalidArgumentTypeWithClass">An unsupported input argument for "{0}" was encountered.  This function expects only numeric inputs and an optional trailing argument specifying the class of the output.</entry>
    <entry key="BuildInvalidDist">Second input argument must be a codistributor object.</entry>
    <entry key="BuildInvalidNumberOfSizesExact">An invalid number ({0,number,integer}) of numeric arguments was passed to "{1}". "{2}" requires {3,number,integer} numeric arguments.</entry>
    <entry key="BuildInvalidNumberOfSizesRange">An invalid number ({0,number,integer}) of numeric arguments was passed to "{1}". "{2}" requires between {3,number,integer} and {4,number,integer} numeric arguments.</entry>
    <entry key="BuildInvalidSizeArguments">Numeric arguments to "{0}" must either be a single vector or a series of scalars.</entry>
    <entry key="BuildNargChck">At least 1 input argument required.</entry>
    <entry key="BuildNotImplemented">"{0}" is not implemented.</entry>
    <entry key="CatNotSupportedCellMix">CODISTRIBUTED array concatenation of cell arrays and non-cell arrays is currently not supported.</entry>
    <entry key="CatOnlySparseDouble">Sparse arrays cannot be concatenated with non-double arrays.</entry>
    <entry key="Cell2StructInvalidFieldSize">Number of field names must match number of fields in new structure.</entry>
    <entry key="Cell2StructInvalidInputType">First input argument to CELL2STRUCT must be a cell vector or cell matrix.</entry>
    <entry key="CelldispNotCellArray">Must be a cell array.</entry>
    <entry key="CellfunFunctionHandleRequired">The first input to CELLFUN must be a function handle.</entry>
    <entry key="CellfunInputsMustBeSameSize">CELLFUN expects all cell inputs to be of the same size.</entry>
    <entry key="CellfunNotACell">CELLFUN received a {0} input, instead of a cell array.</entry>
    <entry key="CholInputType">Shape flag must be ''upper'' or ''lower''.</entry>
    <entry key="CholNotSupported">CHOL is only supported for codistributed full floating point arrays.</entry>
    <entry key="CholPosdef">Matrix must be positive definite.</entry>
    <entry key="CholSquare">Matrix must be square.</entry>
    <entry key="CodistexternIllegalInput">Matrix factorization encountered an illegal input.  Error code = {0,number,integer}.</entry>
    <entry key="CodistexternLastInputScalarLogical">The last input argument must be a scalar logical.</entry>
    <entry key="CodistexternLastTwoInputsScalarLogical">The last two input arguments must be scalar logical.</entry>
    <entry key="CodistrNotAllowed">Input arguments to {0} must not be codistributed when ''{1}'' is specified.</entry>
    <entry key="CodistributedFunctionFunctionHandleInput">The first input must be a function handle.</entry>
    <entry key="CodistributorNotSupported">{0} is currently supported only for codistributed arrays using a 1d codistributor.</entry>
    <entry key="ColonInvalidArgs">Invalid input arguments to COLON.  When provided, the last arguments must be a codistributor or the flag ''noCommunication''.</entry>
    <entry key="ColonInvalidStartEnd">Invalid input arguments to COLON.  Start, end and stride must be double, single or integer.</entry>
    <entry key="ColonNoEndpoint">Upper limit of COLON range is missing.</entry>
    <entry key="ComplexInput">Inputs must be numeric, real, and full.</entry>
    <entry key="ConversionCodistributor">When calling CODISTRIBUTED(D, CODISTR) with D a codistributed array, the second argument must be a codistributor.</entry>
    <entry key="Conv2AorBNotMatrix">A and B must be matrices.</entry><!--Matches MATLAB:conv:AorBNotVector-->
    <entry key="Conv2HrowHcolCodistributed">HCOL and HROW must not be codistributed arrays.</entry>
    <entry key="CosdComplexInput">Argument should be real.</entry>
    <entry key="CotdComplexInput">Argument should be real.</entry>
    <entry key="CscNotEnoughInputs">Not enough input arguments.</entry>
    <entry key="CscdComplexInput">Argument should be real.</entry>
    <entry key="DatastoreNotSplittable">Datastore used to build a distributed array must be splittable.</entry>
    <entry key="DenseEigNoConvergence">EIG did not converge at index = {0,number,integer}.</entry>
    <entry key="DenseSvdNoConvergence">SVD did not converge at index = {0,number,integer}.</entry>
    <entry key="DescriptorBadStartPoint">The size of the starting point or number of elements was invalid.</entry>
    <entry key="DescriptorInvalidClass">Cannot build a CodistributedDescriptor for objects of class: {0}.</entry>
    <entry key="DescriptorInvalidDistributionScheme">Cannot build a CodistributedDescriptor for distribution scheme: {0}.</entry>
    <entry key="DescriptorInvalidSizes">Invalid combination of sizes of arguments  to CodistributedDescriptor constructor.</entry>
    <entry key="DiagClassUnderlyingNotSupported">DIAG does not support {0} arrays.</entry>
    <entry key="DiagCodistributorNotSupported">DIAG does not support input which uses the {0} scheme.</entry>
    <entry key="DiagFirstInputMustBe2D">First input must be 2D.</entry>
    <entry key="DistributedSave">Saving distributed arrays is not supported.</entry>
    <entry key="DistributedSubsref">Distributed SUBSREF currently only supports () indexing.</entry>
    <entry key="DistributedSubsrefSimple">Distributed objects only support simple subscripting.</entry>
    <entry key="DistributedUnexpectedConstructorArgs">The distributed array constructor should be called with 0 or 1 arguments.</entry>
    <entry key="DloadCannotScatterVariable">Could not scatter "{0}" because the type ({1}) is not supported for distributed array creation.</entry>
    <entry key="DloadCurrentPoolLargerThanComposite">The Composite "{0}" was created with a pool of size {1,number,integer}, and is being loaded into a Composite of size {2,number,integer} (the current default Composite size).</entry>
    <entry key="DloadErrorLoadingVariable">An error occurred loading "{0}" from {1}, this array has not been loaded.</entry>
    <entry key="DloadMissingVariables">The following variables cannot be found in {0}: {1}.</entry>
    <entry key="DloadNumberOfOutputArguments">When DLOAD is used with output arguments, the number of output arguments must match the number of variables requested: {0,number,integer} variable(s) were requested, {1,number,integer} output argument(s) were supplied.</entry>
    <entry key="DloadPoolTooSmallForComposite">The Composite "{0}" was created with a pool of size {1,number,integer}, and cannot be loaded into a Composite of size {2,number,integer} (the current default Composite size).</entry>
    <entry key="DloadTransparencyViolation">A transparency violation error occurred during DLOAD. This might be caused by calling DLOAD directly within an SPMD block.</entry>
    <entry key="DloadUnknownType">An unknown type ({0}) of variable was found in the file: {1}.</entry>
    <entry key="DmatFileCouldNotSave">Could not save to file: {0}.</entry>
    <entry key="DmatFileFailedToReadFile">Could not read from file: {0}.</entry>
    <entry key="DmatFileInvalidVariable">The variable {0} was not found in {1}.</entry>
    <entry key="DmatFileNoLongerExists">Unexpected failure to save data to file: {0}.</entry>
    <entry key="DmatFileNotFound">Unable to find file {0}: {1}.</entry>
    <entry key="DmatIncompleteVariables">The following variable(s) were not completely written to {0}:\n{1}.</entry>
    <entry key="DmatInvalidCommit">The variable "{0}" has already been committed.</entry>
    <entry key="DmatInvalidMatFile">An unexpected attempt was made to read a portion of "{0}" from file "{1}".</entry>
    <entry key="DmatInvalidMode">Invalid DmatFile mode specified.</entry>
    <entry key="DmatInvalidState">The variable named {0} already exists in file {1}.</entry>
    <entry key="DmatInvalidType">An unexpected error was encountered saving "{0}".</entry>
    <entry key="DmatLoadedRemoteDataFromMatFile">Data of class: {0} was loaded from {1}. This data is invalid. Use DSAVE to save this type of data.</entry>
    <entry key="DmatNewerMajorVersion">The version of file "{0}" is: {1}, which is not compatible with the current supported version, {2}.</entry>
    <entry key="DmatNewerMinorVersion">The version of file "{0}" is: {1}, which is newer than the current supported version, {2}. Some information may be lost when loading data.</entry>
    <entry key="DmatReadModeRequired">Invalid mode for operation - read mode required.</entry>
    <entry key="DmatSaveAborted">A call to DSAVE did not complete normally; data may be corrupt in {0}.</entry>
    <entry key="DmatSaveCreateCell">The argument to sSaveCreateArgs must be a cell array.</entry>
    <entry key="DmatUnexpectedFileType">The file "{0}" appears to have been saved using DSAVE, but the file does not support loading partial arrays. This may cause excessive memory usage.</entry>
    <entry key="DmatWriteModeRequired">Invalid mode for operation - write mode required.</entry>
    <entry key="DmatWritesCommitted">Invalid mode for operation - writes already committed for file: {0}.</entry>
    <entry key="DotInputSizeMismatch">A and B must be same size.</entry>
    <entry key="DsaveCantSaveCodistributed">DSAVE cannot save codistributed arrays, use PSAVE instead.</entry>
    <entry key="DsaveCantSaveSparse">DSAVE cannot currently save sparse distributed arrays, ''{0}'' has not been saved.</entry>
    <entry key="DsaveErrorDuringSave">An error occurred saving "{0}" and therefore this array has not been saved.\nThe error was:\n{1}.</entry>
    <entry key="DsaveLoadArgsMustBeStrings">All arguments to {0} must be strings or character vectors.</entry>
    <entry key="DsaveLoadIllegalArgument">The following illegal argument(s) were passed to {0}: {1}.</entry>
    <entry key="DsaveLoadInvalidTypeInformation">Invalid type information was provided: {0}.</entry>
    <entry key="DsaveMissingVariables">The following variables could not be found for DSAVE: {0}.</entry>
    <entry key="DsaveTransparencyViolation">A transparency violation error occurred during DSAVE. This might be caused by calling DSAVE directly within an SPMD block.</entry>
    <entry key="EigBMustBePosDef">The second matrix argument to generalized EIG must be positive definite.</entry>
    <entry key="EigMatrixWithNaNInf">Input to EIG must not contain NaN or Inf.</entry>
    <entry key="EigNoNonSymEig">Non symmetric eigenvalue problem is not yet available for codistributed arrays.</entry>
    <entry key="EigNotReal">EIG is only supported for codistributed full floating point arrays.</entry>
    <entry key="EigUnsupportedSyntax">EIG for codistributed arrays does not support these syntaxes: EIG(X, ''nobalance'') and EIG(A, B, ''qz'').</entry>
    <entry key="EigsNotImplemented">EIGS is not yet implemented for codistributed arrays.</entry>
    <entry key="EyeTooHighDim">EYE only creates matrices, and cannot create {0,number,integer}-D arrays.</entry>
    <entry key="FftUnsupportedClass">{0} is only supported for codistributed full floating point arrays (single or double).</entry>
    <entry key="FindInvalidOption">Invalid search option. Must be ''first'' or ''last''.</entry>
    <entry key="FindMaxlhs">Too many output arguments.</entry>
    <entry key="FindNotScalarInt">Second argument must be a positive scalar integer.</entry>
    <entry key="GatherFirstInput">First argument must be a codistributed array.</entry>
    <entry key="GatherIncorrectLabIndex">When provided, the second input argument to GATHER must be a valid labindex for a worker.</entry>
    <entry key="GlobalIndicesFirstInput">First argument must be a codistributed array.</entry>
    <entry key="IllegalCodistributed">It is illegal to mix distributed and codistributed arrays in an operation.</entry>
    <entry key="IllegalComposite">It is illegal to pass Composite objects as input arguments to codistributed array methods.</entry>
    <entry key="IllegalCompositeForDistributed">It is illegal to pass Composite objects as input arguments to distributed array methods.</entry>
    <entry key="IllegalDistributed">It is illegal to mix distributed and codistributed arrays in an operation.</entry>
    <entry key="IncorrectLabIndex">When calling CODISTRIBUTED(X, SRCLAB, CODISTR) with X a regular array, the second argument must be an integer between 1 and numlabs.</entry>
    <entry key="IndexManipNotImplemented">Only matrices are supported.</entry>
    <entry key="InvInputMustBe2D">INV expects a two dimensional input.</entry>
    <entry key="InvInputMustBeFloat">INV only supports floating point arrays (single or double).</entry>
    <entry key="InvInputMustBeSquare">INV input must be square.</entry>
    <entry key="InvalidDistributed">An attempt was made to use an invalid distributed array. This could be because a pool does not exist, or the distributed array could have been passed into an SPMD block inside some other container such as a cell array or structure.</entry>
    <entry key="InvalidInput">The CODISTRIBUTED constructor with two input arguments expects the second argument to be either a valid codistributor or an integer SRCLAB between 1 and numlabs.</entry>
    <entry key="InvalidNumberOfLabs">The number of workers must be the same when loading a codistributed array as it was when the array was saved.  This array was saved with numlabs equal to {0,number,integer}, but numlabs is now {1,number,integer}.</entry>
    <entry key="InvalidSparse">Function {0} does not support sparse inputs.</entry>
    <entry key="InvalidType">Function {0} does not support inputs of type {1}.</entry>
    <entry key="InvalidTypeForConstruction">A distributed array cannot be created with data of class: {0}.</entry>
    <entry key="LinearIndRedistInvalidSize">Array size must be non-negative integer-valued numeric.</entry>
    <entry key="LinearIndRedistNotTPRedist">First argument must be TensorProductRedistributable.</entry>
    <entry key="LinspaceInvalidArgs">Invalid input arguments to LINSPACE.  When provided, the last arguments must be a codistributor or the flag ''noCommunication''.</entry>
    <entry key="LinspaceNonScalarInput">LINSPACE requires scalar inputs.</entry>
    <entry key="LinspaceOnlySupportFloat">LINSPACE is only supported for floating point inputs (single or double).</entry>
    <entry key="LogspaceInvalidArgs">Invalid input arguments to LOGSPACE.  When provided, the last arguments must be a codistributor or the flag ''noCommunication''.</entry>
    <entry key="LogspaceNonScalarInput">LOGSPACE requires scalar inputs.</entry>
    <entry key="LogspaceOnlySupportFloat">LOGSPACE is only supported for floating point inputs (single or double).</entry>
    <entry key="LuNotFloat">LU is only supported for codistributed full floating point arrays.</entry>
    <entry key="LuSupported">Only [L U P] = lu(A, ''vector'') is currently supported.</entry>
    <entry key="Mat2cellNotImplemented">MAT2CELL is not yet implemented for codistributed arrays.</entry>
    <entry key="MeshgridNotEnoughInputs">Not enough input arguments.</entry>
    <entry key="MeshgridOnlySupportFloat">MESHGRID is only supported for floating point inputs (single or double).</entry>
    <entry key="MethodAccessNotImplemented">It is not possible to call "{0}" directly on a distributed array.  To call "{1}", you must enter an SPMD block and operate on the corresponding codistributed array.</entry>
    <entry key="MldivideNearlySingularMatrix">Matrix is close to singular or badly scaled.\nResults may be inaccurate.</entry>
    <entry key="MldivideNotSupported">For codistributed arrays, MLDIVIDE supports only floating point (single or double) data.</entry>
    <entry key="MldivideSparseInput">If the first input argument is rectangular, it cannot be sparse.</entry>
    <entry key="MrdivideNearlySingularMatrix">Matrix is close to singular or badly scaled.\nResults may be inaccurate.</entry>
    <entry key="MrdivideNotSupported">For codistributed arrays, MRDIVIDE supports only floating point (single or double) data.</entry>
    <entry key="MrdivideSparseInput">If the second input argument is rectangular, it cannot be sparse.</entry>
    <entry key="NdgridNotEnoughInputs">Not enough input arguments.</entry>
    <entry key="NdgridOnlySupportFloat">NDGRID is only supported for floating point inputs (single or double).</entry>
    <entry key="NoFunctionHandle">Function handles cannot be distributed.</entry>
    <entry key="NoMoreRegions">Internal error: no more regions.</entry>
    <entry key="NonReplicated">Input arguments to {0} must be the same on all workers.</entry>
    <entry key="NotStringArray">Input to {0} must be an array of strings or character vectors.</entry>
    <entry key="NormInvalidP">Invalid value for p in call to norm(A, p).</entry>
    <entry key="NormMatrixNormNotSupport">The only matrix norms available are 1, 2, inf, and ''{0}''.</entry>
    <entry key="NormNotSupported">NORM is only supported for floating point arrays.</entry>
    <entry key="NormNotVectorOrMatrix">First input must be either a vector or a matrix.</entry>
    <entry key="NormSparseMat2NormUnsupported">Sparse norm(S,2) is not available.</entry>
    <entry key="NormVectorNormNotSupport">The only vector norms available are inf, -inf, and p (a floating point scalar).</entry>
    <entry key="NormestNotVectorOrMatrix">Input must be a vector or a matrix.</entry>
    <entry key="NthrootComplexInput">Both X and N must be real.</entry>
    <entry key="NumelBadIndexType">A distributed array may not be indexed using an object of class: {0}.</entry>
    <entry key="ParseBuildArgsInvalidInput">Invalid input arguments.</entry>
    <entry key="PloadNumlabsMismatch">The number of workers must be the same when loading a codistributed array as it was when the array was saved.  This array was saved with numlabs equal to {0,number,integer}, but numlabs is now {1,number,integer}.</entry>
    <entry key="QrFullTooManyInputs">QR does not accept three inputs when A is full.</entry>
    <entry key="QrNotFloat">QR is only supported for codistributed full floating point arrays.</entry>
    <entry key="QrTooFewOutputs">The single output form of QR is not supported for codistributed arrays.</entry>
    <entry key="QrUnsupportedFlag">QR accepts only the number 0 or the flags 'vector' or 'matrix'.</entry>
    <entry key="QrUnsupportedSparse">QR does not support codistributed sparse arrays as input.</entry>
    <entry key="RedistSameSizeToSingleDistAllReplicated">At least one input argument should be codistributed.</entry>
    <entry key="RedistSameSizeToSingleDistConstraintViolated">No valid codistributor found for redistribution.</entry>
    <entry key="RedistSameSizeToSingleDistInvalidInput">Second input must be a function handle.</entry>
    <entry key="RedistributeFirstInput">First argument must be a codistributed array.</entry>
    <entry key="RedistributeInvalidTargetSize">Target codistributor does not match the size of the array to redistribute.  The array is of size [{0}], whereas the target codistributor is expecting the array to be of size [{1}].</entry>
    <entry key="RedistributeNDwith2DBC">Cannot redistribute ND arrays to use the 2D block-cyclic codistributor.</entry>
    <entry key="RedistributeSecondInput">REDISTRIBUTE received invalid distribution scheme input of class ''{0}''.</entry>
    <entry key="RedistributeUnsupportedCodistributor">Redistribution between {0} and {1} is not supported.</entry>
    <entry key="RemoteFailure">An error was detected during remote execution.</entry>
    <entry key="RemoteMismatchMixture">You cannot operate on distributed arrays which exist on different sets of workers.</entry>
    <entry key="ReplicatedCodistributor">When calling CODISTRIBUTED(X, SRCLAB, CODISTR) with X a regular array, the third argument must be a codistributor.</entry>
    <entry key="ReshapeNonnegativeSize">Size vector elements must be non-negative, real integers.</entry>
    <entry key="ReshapeNotDivisible">Total number of elements({0,number,integer}) is not divisible by product of known dimensions({1,number,integer}).</entry>
    <entry key="ReshapeOneUnknownDim">Size can have at most one unknown dimension.</entry>
    <entry key="ReshapeRowSize">Size vector must be a row vector with integer elements.</entry>
    <entry key="ReshapeSameNumel">To RESHAPE the number of elements must not change.</entry>
    <entry key="ReshapeTwoElements">Size vector must have at least two elements.</entry>
    <entry key="ScalaHelpersInvalidMatrixDescriptor">Invalid matrix array descriptor.</entry>
    <entry key="ScalaHelpersInvalidOrientString">Invalid LabGrid orientation.  Use ''row'' or ''col'' instead.</entry>
    <entry key="SecdComplexInput">Argument should be real.</entry>
    <entry key="ShiftedRedistInvalidDims">Dimensions must be integer-valued numeric greater than 0.</entry>
    <entry key="ShiftedRedistInvalidFirst">Element shift must be integer-valued numeric.</entry>
    <entry key="ShiftedRedistNotTPRedist">First argument must be TensorProductRedistributable.</entry>
    <entry key="SindComplexInput">Argument should be real.</entry>
    <entry key="SizeDimInput">Second input must be a numeric scalar dimension.</entry>
    <entry key="SizeInvalidCodistributed">Dimension must not be a codistributed array.</entry>
    <entry key="SizeNumOutputs">SIZE accepts only one output argument when DIM argument is provided.</entry>
    <entry key="SortClassUnderlyingNotSupported">SORT only supports numeric arrays, character arrays, logical arrays, or cell arrays of character vectors.</entry>
    <entry key="SortTooManyInputs">DIM and MODE arguments not supported for cell arrays.</entry>
    <entry key="SortrowsFirstInputMustBe2D">The matrix to be sorted by rows must be 2D.</entry>
    <entry key="SortrowsUnsupportedClass">SORTROWS only supports numeric arrays, character arrays, or logical arrays.</entry>
    <entry key="SpallocInvalidNzmx">Number of non-zeros must be non-negative integers.</entry>
    <entry key="SpallocInvalidOneOptionalInput">When called with four input arguments, the fourth input argument to SPALLOC must be either a codistributor object or ''noCommunication''.</entry>
    <entry key="SpallocInvalidTwoOptionalInputs">When called with five input arguments, the fourth and fifth input arguments to SPALLOC must be a codistributor object and ''noCommunication''.</entry>
    <entry key="Sparse">Invalid input arguments to SPARSE.  The first two arguments must be the matrix sizes, followed by the codistributor, and the optional ''{0}'' flag.</entry>
    <entry key="SparseDimensionTooSmall">The dimensions supplied to SPARSE are too small.</entry>
    <entry key="SparseInconsistentInput">All non-scalar inputs to SPARSE must have the same number of elements.</entry>
    <entry key="SparseInputsNot2d">N-D inputs are not supported for SPARSE.</entry>
    <entry key="SparseInvalidCodistributor">None of the inputs to SPARSE was distributed with a valid codistributor.  Only dimensions 1 or 2 are valid distribution dimensions for sparse arrays distributed using codistributor1d.</entry>
    <entry key="SparseInvalidDataType">First three inputs to SPARSE must be of class double.</entry>
    <entry key="SparseNDNotSupported">N-D sparse is not supported.</entry>
    <entry key="SparseNonscalarDim">The dimensions supplied to SPARSE must be integer scalars.</entry>
    <entry key="SparseOutOfMemory">There is insufficient memory available to solve this linear system.</entry>
    <entry key="SparseSolverError">An undetermined error occurred during execution.</entry>
    <entry key="SparseSolverMessageBufferOverflow">Unable to solve system using the input sparse matrix because the internal message buffer limit of {0,number,integer} was reached. Contact MathWorks Technical Support.</entry>
    <entry key="SparseSolverNoPrecondition">A preconditioning matrix for a sparse solver must be triangular.</entry>
    <entry key="SpeyeInvalidArgument">Invalid argument: ''{0}''.</entry>
    <entry key="SpeyeTooHighDim">SPEYE only creates matrices, and cannot create {0,number,integer}-D arrays.</entry>
    <entry key="SpfunInvalidFcn">First input to SPFUN must be a function name or a function handle.</entry>
    <entry key="SpfunInvalidMatrix">Second input to SPFUN must be a codistributed array.</entry>
    <entry key="SpfunNDNotSupported">N-D sparse is not supported.</entry>
    <entry key="SprandInvalidDensity">Density must be a scalar between 0 and 1.</entry>
    <entry key="SprandInvalidOptionalInputs">Invalid optional input arguments to {0}.  Expected a codistributor object and/or ''noCommunication''.</entry>
    <entry key="Str2numNotSupported">The STR2NUM function does not support distributed arrays. Use STR2DOUBLE instead.</entry>
    <entry key="Struct2CellInvalidInputType">Input argument to STRUCT2CELL must be a struct.</entry>
    <entry key="SubsasgnBadIndexType">Distributed SUBSASGN currently only supports () indexing.</entry>
    <entry key="SubsasgnNotYetFewSubscripts">Distributed SUBSASGN does not yet support indexing with k subscripts where 1 &lt; k &lt; ndims.</entry>
    <entry key="SubsasgnNotYetLinear">Distributed SUBSASGN does not yet support expansion with linear indexing.</entry>
    <entry key="SubsasgnNotYetNonScalar">Distributed SUBSASGN does not yet support expansion with a nonscalar right hand side.</entry>
    <entry key="SubsasgnNotYetTables">Distributed SUBSASGN does not yet support assigning into tables.</entry>
    <entry key="SubsasgnSimpleSubscripting">Distributed objects only support simple subscripting.</entry>
    <entry key="SubsasgnSizeMismatch">Subscripted assignment dimension mismatch.</entry>
    <entry key="SubsetRedistIncorrectSize">Incorrect size of replicated array.</entry>
    <entry key="SubsetRedistInvalidDims">Dimensions must be integer-valued numeric greater than 0.</entry>
    <entry key="SubsetRedistInvalidFirst">Element shift must be integer-valued numeric.</entry>
    <entry key="SubsetRedistInvalidNDims">Incorrect number of dimensions of replicated array.</entry>
    <entry key="SubsetRedistInvalidSize">Size of subset be non-negative integer-valued numeric.</entry>
    <entry key="SubsetRedistNotTPRedist">First argument must be TensorProductRedistributable.</entry>
    <entry key="SubsetRedistSizeMismatch">Element shift vector must be at least as long as the size vector.</entry>
    <entry key="SubsrefBadIndexType">Distributed SUBSREF only supports () indexing unless the underlying data type is table.</entry>
    <entry key="SubsrefBadSubscriptSize">Distributed SUBSREF currently only supports vector subscripts.</entry>
    <entry key="SubsrefInparfor">Inside a FOR-DRANGE loop, a subscript can only access the local portion of a codistributed array.</entry>
    <entry key="SvdNotFloat">SVD is only supported for codistributed full floating point matrices (single or double).</entry>
    <entry key="SvdOnlyEconomySvd">Use svd(A,''econ'') for codistributed rectangular matrix.</entry>
    <entry key="SvdUnknownOptionForEconSizeDecomp">Use svd(X,''econ'') for economy size decomposition.</entry>
    <entry key="TandComplexInput">Argument should be real.</entry>
    <entry key="TransposeMatrixOnly">{0} on ND codistributed arrays is not defined.</entry>
    <entry key="TrilNotMatrix">First input must be a matrix.</entry>
    <entry key="TriuNotMatrix">First input must be a matrix.</entry>
    <entry key="TypecastFirstArgMustBeReal">The first input argument must be a full, non-complex numeric value.</entry>
    <entry key="TypecastFirstArgMustBeVector">The first input argument must be a vector.</entry>
    <entry key="TypecastNotEnoughInputElements">Too few input values to make output type.</entry>
    <entry key="TypecastUnsupportedClass">Unsupported class.</entry>
    <entry key="UnexpectedInvalidDistributed">An attempt was made to use an invalid distributed array.</entry>
    <entry key="dimensionMustBePositiveInteger">Dimension argument must be a positive integer scalar within indexing range.</entry>
    <entry key="errorOnOtherLabs">Error detected on worker(s) {0}.</entry>
    <entry key="kthDiagInputNotInteger">K-th diagonal input to {0} must be an integer scalar.</entry>
  </message>
</rsccat>

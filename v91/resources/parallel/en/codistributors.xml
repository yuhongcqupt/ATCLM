<?xml version="1.0"?>
<!-- Copyright 2011-2016 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="parallel">
  <message>
    <entry key="BuildFromLPUnsupportedClass">Class {0} is not supported as the underlying class for codistributed arrays.</entry>
    <entry key="CatUnsupported">CAT is not yet supported with {0}.</entry>
    <entry key="Cell2matUnsupported">CELL2MAT is not yet supported with {0}.</entry>
    <entry key="DiagUnsupported">{0} does not currently support the DIAG function.</entry>
    <entry key="DiffUnsupported">{0} does not currently support the DIFF function.</entry>
    <entry key="DispAllElements">This worker stores all the values of {0}.</entry>
    <entry key="DispNoElements">This worker does not store any elements of {0}.</entry>
    <entry key="DispSomeElements">This worker stores {0}{1}.</entry>
    <entry key="FcnNotSupported">{0} is not yet supported with {1}.</entry>
    <entry key="FftnUnsupported">{0} does not currently support the FFTN function.</entry>
    <entry key="GlobalIndicesInvalidCodistributed">Dimension and labindex of the worker must not be codistributed arrays.</entry>
    <entry key="GlobalIndicesInvalidDimension">Dimension must be a positive, integer-valued numeric scalar.</entry>
    <entry key="GlobalIndicesInvalidLabIndex">Labindex of the worker must be a scalar between 1 and NUMLABS.</entry>
    <entry key="GlobalSizeNotSizeVec">The global size must be a vector of integers.</entry>
    <entry key="GlobalSizeNotVector">The global size must be a row vector.</entry>
    <entry key="GlobalSizeVectorTooShort">The global size should be a vector of length at least two.</entry>
    <entry key="InvalidCachedData">Invalid cached data.</entry>
    <entry key="InvalidDimInput">The dimension input must be one of the dimensions of the distributed array</entry>
    <entry key="InvalidGlobalIndex">The global index must be within the range of the distributed array</entry>
    <entry key="InvalidLabInput">Invalid worker labindex input.</entry>
    <entry key="InvalidLocalIndex">The local index must be within the range of the local part of the distributed array.</entry>
    <entry key="InvalidSchemeInput">Invalid distribution scheme argument specified.</entry>
    <entry key="InvalidSchemeType">Distribution scheme argument must be a string or character vector.</entry>
    <entry key="LikeNotSupported">Because a codistributor object is provided, the prototype following 'like' must be codistributed.</entry>
    <entry key="MtimesReplicatedUnsupported">{0} does not currently support the MTIMES function for replicated matrices.</entry>
    <entry key="MtimesUnsupported">{0} does not currently support the MTIMES function.</entry>
    <entry key="NonzerosUnsupported">{0} does not currently support the NONZEROS function.</entry>
    <entry key="Num2cellUnsupported">NUM2CELL is not yet fully supported with {0}.</entry>
    <entry key="PermuteUnsupported">{0} does not currently support the PERMUTE function.</entry>
    <entry key="ReshapeUnsupported">{0} does not currently support RESHAPE without communication.</entry>
    <entry key="SortArrayUnsupported">{0} does not currently support the SORT function for arrays.</entry>
    <entry key="SortCellStrUnsupported">{0} does not currently support the SORT function for cell arrays of character vectors.</entry>
    <entry key="SortVectorUnsupported">{0} does not currently support the SORT function for vectors.</entry>
    <entry key="SortrowsUnsupported">{0} does not currently support the SORTROWS function.</entry>
    <entry key="Struct2CellCodistributorNotSupported">{0} does not currently support the STRUCT2CELL function.</entry>
    <entry key="TensorArrayCellfunClassMismatch">Mismatch in type of outputs in output {0,number,integer} ({1} versus {2}).  Set ''UniformOutput'' to false.</entry>
    <entry key="TensorElementwiseOpAtLeastOneCodistributor">At least one of the codistributors must be specified.</entry>
    <entry key="TensorElementwiseOpCodistributorsMustMatch">All codistributed inputs must have the same distribution scheme.</entry>
    <entry key="TensorElementwiseOpReplicatedNotScalar">When input is replicated, it must be a scalar.</entry>
    <entry key="c1dBuildFromLPAttributeMismatch">Local part must have the same class and sparsity on all workers. All other arguments also need to be replicated.</entry>
    <entry key="c1dBuildFromLPDimDerived">CODISTRIBUTED(L,''1d'',DIM) requires DIM to match sizes of L.</entry>
    <entry key="c1dBuildFromLPDistParDerived">CODISTRIBUTED(L,''1d'',DIM,PART) requires PART to match sizes of L.</entry>
    <entry key="c1dBuildFromLPIncompleteCodistributor">Codistributor must be complete when building a codistributed array from its local parts.</entry>
    <entry key="c1dBuildFromLPNoCommDimParL">SIZE(L,DIM) must equal to PART(LABINDEX).</entry>
    <entry key="c1dBuildFromLPSizeMismatchDim">Sizes of L incompatible with DIM in CODISTRIBUTED(L,''1d'',DIM).</entry>
    <entry key="c1dBuildFromLPSizeMismatchL">Sizes of L incompatible in CODISTRIBUTED(L).</entry>
    <entry key="c1dBuildFromLocalPartIncorrectSize">Size of local part ({0}) does not match the expected size of the local part ({1}).</entry>
    <entry key="c1dBuildFromReplicatedUnsupportedClass">Class {0} is not supported as the underlying class for codistributed arrays.</entry>
    <entry key="c1dCell2matEmptyCellArray">Cell array must not be empty.</entry>
    <entry key="c1dCell2matInconsistentFieldNames">The field names of each cell array element must be consistent and in consistent order.</entry>
    <entry key="c1dCell2matInconsistentSizesOfLocalParts">Dimensions of local parts are not consistent.</entry>
    <entry key="c1dCell2matMixedDataTypes">All contents of the input cell array must be of the same data type.</entry>
    <entry key="c1dDistributionDimensionInput">Distribution dimension must be a positive integer-valued numeric scalar.</entry>
    <entry key="c1dDistributionPartitionInput">Distribution partition must be a length NUMLABS row-vector of non-negative integer-valued numeric values.</entry>
    <entry key="c1dGlobalIndicesImpInvalidInput">Codistributor must be complete when obtaining global indices.</entry>
    <entry key="c1dGlobalIndicesImplTooManyOutputArguments">Too many output arguments.</entry>
    <entry key="c1dHLocalSizeNotComplete">Codistributor must be complete when obtaining the local size.</entry>
    <entry key="c1dInvalidSize">Dimension must be within bounds and size in dimension must be &gt; 1.</entry>
    <entry key="c1dMinMaxAlongDimNonTrivialPartition">Partition must be non-zero on exactly one worker.</entry>
    <entry key="c1dMtimesHighDistDimNotSupported">Matrix multiplication is only supported for arrays distributed along rows or columns.</entry>
    <entry key="c1dParMatchSizeDim">The sum of the distribution partition must be equal to the global size in the distribution dimension.</entry>
    <entry key="c1dReductionAlongDimInvalidPartition">Partition must be non-zero on at most one worker.</entry>
    <entry key="c1dSizeInput">The global size must be a row-vector of non-negative integer-valued numeric values for ''1d'' scheme.</entry>
    <entry key="c1dSortUnknownType">Unrecognized type {0} seen in SORT</entry>
    <entry key="c1dSparseSupportNDNotSupported">N-D sparse is not supported.</entry>
    <entry key="c1dSparseSupportTooHighDistributionDim">When distributing a sparse array with a codistributor1d scheme, you must distribute along dimension 1 or 2.  You are attempting to distribute along dimension {0,number,integer}.</entry>
    <entry key="c1dTableSupportTooHighDistributionDim">When distributing a table with a codistributor1d scheme, you must distribute along dimension 1 or 2.  You are attempting to distribute along dimension {0,number,integer}.</entry>
    <entry key="c2dbcBlockSizeInput">The block size must be a positive integer-valued numeric scalar.</entry>
    <entry key="c2dbcBuildFromLPAttributeMismatch">Local part must have the same class and sparsity on all workers. All other arguments also need to be replicated.</entry>
    <entry key="c2dbcBuildFromLPIncompleteCodistributor">Codistributor must be complete when building a codistributed array from its local parts.</entry>
    <entry key="c2dbcBuildFromLPInvalidBuildOption">Codistributor2dbc does not support matching the local parts.</entry>
    <entry key="c2dbcBuildFromLPSizeMismatch2DimSize">Sizes of local part incompatible with specified codistributor.  Expected size of local part was {0}, but actual size was {1}.</entry>
    <entry key="c2dbcBuildFromLPUnsupportedClass">Class {0} is not supported as the underlying class for codistributed arrays.</entry>
    <entry key="c2dbcBuildFromReplicatedUnsupportedClass">Class {0} is not supported as the underlying class for codistributed arrays.</entry>
    <entry key="c2dbcGlobalIndicesNotComplete">Codistributor must be complete when obtaining global indices.</entry>
    <entry key="c2dbcInvalidSize">Dimension must be within bounds and size in dimension must be &gt; 1.</entry>
    <entry key="c2dbcIsOnLabGridEdgeInvalidDimension">Dimension must be 1 or 2.</entry>
    <entry key="c2dbcLabGridInput">The lab grid must be a length 2 row-vector of positive integer-valued numeric values, whose product equals to NUMLABS.</entry>
    <entry key="c2dbcLabindexToProcessorColOrientUnsupported">CODISTRIBUTOR2DBC does not support ''{0}'' orientation.  Specify either ''row'' or ''col'' instead.</entry>
    <entry key="c2dbcLabindexToProcessorRowOrientUnsupported">CODISTRIBUTOR2DBC does not support ''{0}'' orientation.  Use either ''row'' or ''col'' instead.</entry>
    <entry key="c2dbcLocalSizeNotComplete">Codistributor must be complete when getting the local size.</entry>
    <entry key="c2dbcMethodNotImplemented">The method {0} has not been implemented for 2D block-cyclic.</entry>
    <entry key="c2dbcNonCharOrientation">The orientation of the 2D block-cyclic scheme should be a character vector and not a {0}.</entry>
    <entry key="c2dbcOrientationInput">The 2D block-cyclic scheme does not support ''{0}'' orientation.  Use either ''row'' or ''col'' orientation instead.</entry>
    <entry key="c2dbcProcessAlongDimInvalidDimension">Dimension must be 1 or 2.</entry>
    <entry key="c2dbcSizeInput">The global size must be a length 2 row-vector of non-negative integer-valued numeric values for 2D block-cyclic scheme.</entry>
    <entry key="c2dbcUnsupportedNDim">The 2D block-cyclic distribution scheme only supports matrices.  The provided array had {0,number,integer} dimensions.</entry>
    <entry key="c2dbcUnsupportedTable">The 2D block-cyclic distribution scheme does not support tables.</entry>
  </message>
</rsccat>
